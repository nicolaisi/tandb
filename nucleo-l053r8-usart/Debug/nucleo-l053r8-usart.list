
nucleo-l053r8-usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003914  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a60  08003a60  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a68  08003a68  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a68  08003a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a6c  08003a6c  00013a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000010  08003a80  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003a80  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009a8e  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019f8  00000000  00000000  00029b09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007b0  00000000  00000000  0002b508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005e9  00000000  00000000  0002bcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013692  00000000  00000000  0002c2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a202  00000000  00000000  0003f933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00077055  00000000  00000000  00049b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a7c  00000000  00000000  000c0b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000c2608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080039bc 	.word	0x080039bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080039bc 	.word	0x080039bc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	469c      	mov	ip, r3
 800027a:	0413      	lsls	r3, r2, #16
 800027c:	4647      	mov	r7, r8
 800027e:	0c1b      	lsrs	r3, r3, #16
 8000280:	001d      	movs	r5, r3
 8000282:	000e      	movs	r6, r1
 8000284:	4661      	mov	r1, ip
 8000286:	0404      	lsls	r4, r0, #16
 8000288:	0c24      	lsrs	r4, r4, #16
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	0c10      	lsrs	r0, r2, #16
 8000290:	434b      	muls	r3, r1
 8000292:	4365      	muls	r5, r4
 8000294:	4341      	muls	r1, r0
 8000296:	4360      	muls	r0, r4
 8000298:	0c2c      	lsrs	r4, r5, #16
 800029a:	18c0      	adds	r0, r0, r3
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4356      	muls	r6, r2
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	042d      	lsls	r5, r5, #16
 80002b6:	0c2d      	lsrs	r5, r5, #16
 80002b8:	1989      	adds	r1, r1, r6
 80002ba:	4463      	add	r3, ip
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	18c9      	adds	r1, r1, r3
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	d434      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000302:	469b      	mov	fp, r3
 8000304:	4653      	mov	r3, sl
 8000306:	465a      	mov	r2, fp
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83b      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e079      	b.n	8000412 <__udivmoddi4+0x146>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e076      	b.n	8000418 <__udivmoddi4+0x14c>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e029      	b.n	8000398 <__udivmoddi4+0xcc>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	469b      	mov	fp, r3
 8000370:	2320      	movs	r3, #32
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	4652      	mov	r2, sl
 8000376:	40da      	lsrs	r2, r3
 8000378:	4641      	mov	r1, r8
 800037a:	0013      	movs	r3, r2
 800037c:	464a      	mov	r2, r9
 800037e:	408a      	lsls	r2, r1
 8000380:	0017      	movs	r7, r2
 8000382:	4642      	mov	r2, r8
 8000384:	431f      	orrs	r7, r3
 8000386:	4653      	mov	r3, sl
 8000388:	4093      	lsls	r3, r2
 800038a:	001e      	movs	r6, r3
 800038c:	42af      	cmp	r7, r5
 800038e:	d9c3      	bls.n	8000318 <__udivmoddi4+0x4c>
 8000390:	2200      	movs	r2, #0
 8000392:	2300      	movs	r3, #0
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	9301      	str	r3, [sp, #4]
 8000398:	4643      	mov	r3, r8
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0d8      	beq.n	8000350 <__udivmoddi4+0x84>
 800039e:	07fb      	lsls	r3, r7, #31
 80003a0:	0872      	lsrs	r2, r6, #1
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4646      	mov	r6, r8
 80003a6:	087b      	lsrs	r3, r7, #1
 80003a8:	e00e      	b.n	80003c8 <__udivmoddi4+0xfc>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d101      	bne.n	80003b2 <__udivmoddi4+0xe6>
 80003ae:	42a2      	cmp	r2, r4
 80003b0:	d80c      	bhi.n	80003cc <__udivmoddi4+0x100>
 80003b2:	1aa4      	subs	r4, r4, r2
 80003b4:	419d      	sbcs	r5, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	1924      	adds	r4, r4, r4
 80003ba:	416d      	adcs	r5, r5
 80003bc:	2100      	movs	r1, #0
 80003be:	3e01      	subs	r6, #1
 80003c0:	1824      	adds	r4, r4, r0
 80003c2:	414d      	adcs	r5, r1
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d006      	beq.n	80003d6 <__udivmoddi4+0x10a>
 80003c8:	42ab      	cmp	r3, r5
 80003ca:	d9ee      	bls.n	80003aa <__udivmoddi4+0xde>
 80003cc:	3e01      	subs	r6, #1
 80003ce:	1924      	adds	r4, r4, r4
 80003d0:	416d      	adcs	r5, r5
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d1f8      	bne.n	80003c8 <__udivmoddi4+0xfc>
 80003d6:	9800      	ldr	r0, [sp, #0]
 80003d8:	9901      	ldr	r1, [sp, #4]
 80003da:	465b      	mov	r3, fp
 80003dc:	1900      	adds	r0, r0, r4
 80003de:	4169      	adcs	r1, r5
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	db24      	blt.n	800042e <__udivmoddi4+0x162>
 80003e4:	002b      	movs	r3, r5
 80003e6:	465a      	mov	r2, fp
 80003e8:	4644      	mov	r4, r8
 80003ea:	40d3      	lsrs	r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	40e2      	lsrs	r2, r4
 80003f0:	001c      	movs	r4, r3
 80003f2:	465b      	mov	r3, fp
 80003f4:	0015      	movs	r5, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	db2a      	blt.n	8000450 <__udivmoddi4+0x184>
 80003fa:	0026      	movs	r6, r4
 80003fc:	409e      	lsls	r6, r3
 80003fe:	0033      	movs	r3, r6
 8000400:	0026      	movs	r6, r4
 8000402:	4647      	mov	r7, r8
 8000404:	40be      	lsls	r6, r7
 8000406:	0032      	movs	r2, r6
 8000408:	1a80      	subs	r0, r0, r2
 800040a:	4199      	sbcs	r1, r3
 800040c:	9000      	str	r0, [sp, #0]
 800040e:	9101      	str	r1, [sp, #4]
 8000410:	e79e      	b.n	8000350 <__udivmoddi4+0x84>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d8bc      	bhi.n	8000390 <__udivmoddi4+0xc4>
 8000416:	e782      	b.n	800031e <__udivmoddi4+0x52>
 8000418:	4642      	mov	r2, r8
 800041a:	2320      	movs	r3, #32
 800041c:	2100      	movs	r1, #0
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	9100      	str	r1, [sp, #0]
 8000424:	9201      	str	r2, [sp, #4]
 8000426:	2201      	movs	r2, #1
 8000428:	40da      	lsrs	r2, r3
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	e785      	b.n	800033a <__udivmoddi4+0x6e>
 800042e:	4642      	mov	r2, r8
 8000430:	2320      	movs	r3, #32
 8000432:	1a9b      	subs	r3, r3, r2
 8000434:	002a      	movs	r2, r5
 8000436:	4646      	mov	r6, r8
 8000438:	409a      	lsls	r2, r3
 800043a:	0023      	movs	r3, r4
 800043c:	40f3      	lsrs	r3, r6
 800043e:	4644      	mov	r4, r8
 8000440:	4313      	orrs	r3, r2
 8000442:	002a      	movs	r2, r5
 8000444:	40e2      	lsrs	r2, r4
 8000446:	001c      	movs	r4, r3
 8000448:	465b      	mov	r3, fp
 800044a:	0015      	movs	r5, r2
 800044c:	2b00      	cmp	r3, #0
 800044e:	dad4      	bge.n	80003fa <__udivmoddi4+0x12e>
 8000450:	4642      	mov	r2, r8
 8000452:	002f      	movs	r7, r5
 8000454:	2320      	movs	r3, #32
 8000456:	0026      	movs	r6, r4
 8000458:	4097      	lsls	r7, r2
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	40de      	lsrs	r6, r3
 800045e:	003b      	movs	r3, r7
 8000460:	4333      	orrs	r3, r6
 8000462:	e7cd      	b.n	8000400 <__udivmoddi4+0x134>

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fa3e 	bl	800093c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f882 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f91c 	bl	8000700 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004c8:	f000 f8ea 	bl	80006a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit_IT(&huart2,(uint8_t*)user_data,strlen(user_data)); //Transmit data in interrupt mode
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <main+0x54>)
 80004ce:	681c      	ldr	r4, [r3, #0]
 80004d0:	4b0e      	ldr	r3, [pc, #56]	; (800050c <main+0x54>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	0018      	movs	r0, r3
 80004d6:	f7ff fe17 	bl	8000108 <strlen>
 80004da:	0003      	movs	r3, r0
 80004dc:	b29a      	uxth	r2, r3
 80004de:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <main+0x58>)
 80004e0:	0021      	movs	r1, r4
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 fe3c 	bl	8002160 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2,&recvd_data,1); //receive data from data buffer interrupt mode
 80004e8:	490a      	ldr	r1, [pc, #40]	; (8000514 <main+0x5c>)
 80004ea:	4b09      	ldr	r3, [pc, #36]	; (8000510 <main+0x58>)
 80004ec:	2201      	movs	r2, #1
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 fea6 	bl	8002240 <HAL_UART_Receive_IT>
  {
	//strcpy((char*)buf, "Hello\r\n");
	// Send out buffer (temperature or error message)
	//HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);

	HAL_GPIO_TogglePin(GPIOA, LD2_Pin); //loggle the user led which is connected to GPIO PA5
 80004f4:	23a0      	movs	r3, #160	; 0xa0
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	2120      	movs	r1, #32
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 fdab 	bl	8001056 <HAL_GPIO_TogglePin>
	HAL_Delay(500); //delay 500 milisecond
 8000500:	23fa      	movs	r3, #250	; 0xfa
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fa89 	bl	8000a1c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, LD2_Pin); //loggle the user led which is connected to GPIO PA5
 800050a:	e7f3      	b.n	80004f4 <main+0x3c>
 800050c:	20000000 	.word	0x20000000
 8000510:	2000002c 	.word	0x2000002c
 8000514:	20000118 	.word	0x20000118

08000518 <HAL_UART_TxCpltCallback>:
}


//UART 2 transmission complete callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	memset(user_data, 0, strlen(user_data)); //empty the transmission data buffer
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_UART_TxCpltCallback+0x2c>)
 8000522:	681c      	ldr	r4, [r3, #0]
 8000524:	4b07      	ldr	r3, [pc, #28]	; (8000544 <HAL_UART_TxCpltCallback+0x2c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	0018      	movs	r0, r3
 800052a:	f7ff fded 	bl	8000108 <strlen>
 800052e:	0003      	movs	r3, r0
 8000530:	001a      	movs	r2, r3
 8000532:	2100      	movs	r1, #0
 8000534:	0020      	movs	r0, r4
 8000536:	f003 fa15 	bl	8003964 <memset>
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b003      	add	sp, #12
 8000540:	bd90      	pop	{r4, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	20000000 	.word	0x20000000

08000548 <HAL_UART_RxCpltCallback>:

//UART 2 receive complete callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]

	 if(recvd_data == '\n') //when enter is pressed go to this condition
 8000550:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <HAL_UART_RxCpltCallback+0x70>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b0a      	cmp	r3, #10
 8000556:	d11b      	bne.n	8000590 <HAL_UART_RxCpltCallback+0x48>
	 {
		 data_buffer[count++]='\n';
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <HAL_UART_RxCpltCallback+0x74>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	1c59      	adds	r1, r3, #1
 800055e:	4a17      	ldr	r2, [pc, #92]	; (80005bc <HAL_UART_RxCpltCallback+0x74>)
 8000560:	6011      	str	r1, [r2, #0]
 8000562:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <HAL_UART_RxCpltCallback+0x78>)
 8000564:	210a      	movs	r1, #10
 8000566:	54d1      	strb	r1, [r2, r3]
		 HAL_UART_Transmit(huart,data_buffer,count,HAL_MAX_DELAY); //transmit the full sentence again
 8000568:	4b14      	ldr	r3, [pc, #80]	; (80005bc <HAL_UART_RxCpltCallback+0x74>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	b29a      	uxth	r2, r3
 800056e:	2301      	movs	r3, #1
 8000570:	425b      	negs	r3, r3
 8000572:	4913      	ldr	r1, [pc, #76]	; (80005c0 <HAL_UART_RxCpltCallback+0x78>)
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f001 fd53 	bl	8002020 <HAL_UART_Transmit>
		 // submit an RTOS Task
		 memset(data_buffer, 0, count); // empty the data buffer
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <HAL_UART_RxCpltCallback+0x74>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	4b10      	ldr	r3, [pc, #64]	; (80005c0 <HAL_UART_RxCpltCallback+0x78>)
 8000580:	2100      	movs	r1, #0
 8000582:	0018      	movs	r0, r3
 8000584:	f003 f9ee 	bl	8003964 <memset>
		 count = 0;
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <HAL_UART_RxCpltCallback+0x74>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	e008      	b.n	80005a2 <HAL_UART_RxCpltCallback+0x5a>
	 }
	 else
	 {
		 data_buffer[count++] = recvd_data; // every time when interrput is happen, received 1 byte of data
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <HAL_UART_RxCpltCallback+0x74>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	1c59      	adds	r1, r3, #1
 8000596:	4a09      	ldr	r2, [pc, #36]	; (80005bc <HAL_UART_RxCpltCallback+0x74>)
 8000598:	6011      	str	r1, [r2, #0]
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <HAL_UART_RxCpltCallback+0x70>)
 800059c:	7811      	ldrb	r1, [r2, #0]
 800059e:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <HAL_UART_RxCpltCallback+0x78>)
 80005a0:	54d1      	strb	r1, [r2, r3]
	 }
	 HAL_UART_Receive_IT(&huart2,&recvd_data,1); //start next data receive interrupt
 80005a2:	4905      	ldr	r1, [pc, #20]	; (80005b8 <HAL_UART_RxCpltCallback+0x70>)
 80005a4:	4b07      	ldr	r3, [pc, #28]	; (80005c4 <HAL_UART_RxCpltCallback+0x7c>)
 80005a6:	2201      	movs	r2, #1
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fe49 	bl	8002240 <HAL_UART_Receive_IT>
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	20000118 	.word	0x20000118
 80005bc:	2000011c 	.word	0x2000011c
 80005c0:	200000b4 	.word	0x200000b4
 80005c4:	2000002c 	.word	0x2000002c

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b09d      	sub	sp, #116	; 0x74
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	2438      	movs	r4, #56	; 0x38
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	0018      	movs	r0, r3
 80005d4:	2338      	movs	r3, #56	; 0x38
 80005d6:	001a      	movs	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f003 f9c3 	bl	8003964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005de:	2324      	movs	r3, #36	; 0x24
 80005e0:	18fb      	adds	r3, r7, r3
 80005e2:	0018      	movs	r0, r3
 80005e4:	2314      	movs	r3, #20
 80005e6:	001a      	movs	r2, r3
 80005e8:	2100      	movs	r1, #0
 80005ea:	f003 f9bb 	bl	8003964 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ee:	003b      	movs	r3, r7
 80005f0:	0018      	movs	r0, r3
 80005f2:	2324      	movs	r3, #36	; 0x24
 80005f4:	001a      	movs	r2, r3
 80005f6:	2100      	movs	r1, #0
 80005f8:	f003 f9b4 	bl	8003964 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	4b26      	ldr	r3, [pc, #152]	; (8000698 <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a26      	ldr	r2, [pc, #152]	; (800069c <SystemClock_Config+0xd4>)
 8000602:	401a      	ands	r2, r3
 8000604:	4b24      	ldr	r3, [pc, #144]	; (8000698 <SystemClock_Config+0xd0>)
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	0109      	lsls	r1, r1, #4
 800060a:	430a      	orrs	r2, r1
 800060c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800060e:	0021      	movs	r1, r4
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2210      	movs	r2, #16
 8000614:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2201      	movs	r2, #1
 800061a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	22a0      	movs	r2, #160	; 0xa0
 8000626:	0212      	lsls	r2, r2, #8
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2200      	movs	r2, #0
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	187b      	adds	r3, r7, r1
 8000632:	0018      	movs	r0, r3
 8000634:	f000 fd2a 	bl	800108c <HAL_RCC_OscConfig>
 8000638:	1e03      	subs	r3, r0, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800063c:	f000 f8c4 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	2124      	movs	r1, #36	; 0x24
 8000642:	187b      	adds	r3, r7, r1
 8000644:	220f      	movs	r2, #15
 8000646:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2200      	movs	r2, #0
 800064c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	187b      	adds	r3, r7, r1
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2100      	movs	r1, #0
 8000664:	0018      	movs	r0, r3
 8000666:	f001 f8d5 	bl	8001814 <HAL_RCC_ClockConfig>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800066e:	f000 f8ab 	bl	80007c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000672:	003b      	movs	r3, r7
 8000674:	2202      	movs	r2, #2
 8000676:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000678:	003b      	movs	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067e:	003b      	movs	r3, r7
 8000680:	0018      	movs	r0, r3
 8000682:	f001 faeb 	bl	8001c5c <HAL_RCCEx_PeriphCLKConfig>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800068a:	f000 f89d 	bl	80007c8 <Error_Handler>
  }
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b01d      	add	sp, #116	; 0x74
 8000694:	bd90      	pop	{r4, r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	40007000 	.word	0x40007000
 800069c:	ffffe7ff 	.word	0xffffe7ff

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <MX_USART2_UART_Init+0x5c>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ac:	22e1      	movs	r2, #225	; 0xe1
 80006ae:	0252      	lsls	r2, r2, #9
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 fc47 	bl	8001f78 <HAL_UART_Init>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ee:	f000 f86b 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000002c 	.word	0x2000002c
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b089      	sub	sp, #36	; 0x24
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	240c      	movs	r4, #12
 8000708:	193b      	adds	r3, r7, r4
 800070a:	0018      	movs	r0, r3
 800070c:	2314      	movs	r3, #20
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f003 f927 	bl	8003964 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <MX_GPIO_Init+0xc0>)
 8000718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071a:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <MX_GPIO_Init+0xc0>)
 800071c:	2104      	movs	r1, #4
 800071e:	430a      	orrs	r2, r1
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <MX_GPIO_Init+0xc0>)
 8000724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000726:	2204      	movs	r2, #4
 8000728:	4013      	ands	r3, r2
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <MX_GPIO_Init+0xc0>)
 8000730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <MX_GPIO_Init+0xc0>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	430a      	orrs	r2, r1
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_GPIO_Init+0xc0>)
 800073c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	4013      	ands	r3, r2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_GPIO_Init+0xc0>)
 8000748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_GPIO_Init+0xc0>)
 800074c:	2101      	movs	r1, #1
 800074e:	430a      	orrs	r2, r1
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_GPIO_Init+0xc0>)
 8000754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000756:	2201      	movs	r2, #1
 8000758:	4013      	ands	r3, r2
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800075e:	23a0      	movs	r3, #160	; 0xa0
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	2200      	movs	r2, #0
 8000764:	2120      	movs	r1, #32
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fc58 	bl	800101c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	0192      	lsls	r2, r2, #6
 8000772:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000774:	193b      	adds	r3, r7, r4
 8000776:	2284      	movs	r2, #132	; 0x84
 8000778:	0392      	lsls	r2, r2, #14
 800077a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	193b      	adds	r3, r7, r4
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000782:	193b      	adds	r3, r7, r4
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <MX_GPIO_Init+0xc4>)
 8000786:	0019      	movs	r1, r3
 8000788:	0010      	movs	r0, r2
 800078a:	f000 fad1 	bl	8000d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800078e:	0021      	movs	r1, r4
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2220      	movs	r2, #32
 8000794:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2201      	movs	r2, #1
 800079a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007a8:	187a      	adds	r2, r7, r1
 80007aa:	23a0      	movs	r3, #160	; 0xa0
 80007ac:	05db      	lsls	r3, r3, #23
 80007ae:	0011      	movs	r1, r2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fabd 	bl	8000d30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b009      	add	sp, #36	; 0x24
 80007bc:	bd90      	pop	{r4, r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	40021000 	.word	0x40021000
 80007c4:	50000800 	.word	0x50000800

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <HAL_MspInit+0x24>)
 80007da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_MspInit+0x24>)
 80007de:	2101      	movs	r1, #1
 80007e0:	430a      	orrs	r2, r1
 80007e2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	4b04      	ldr	r3, [pc, #16]	; (80007f8 <HAL_MspInit+0x24>)
 80007e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007e8:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <HAL_MspInit+0x24>)
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	0549      	lsls	r1, r1, #21
 80007ee:	430a      	orrs	r2, r1
 80007f0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b089      	sub	sp, #36	; 0x24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	240c      	movs	r4, #12
 8000806:	193b      	adds	r3, r7, r4
 8000808:	0018      	movs	r0, r3
 800080a:	2314      	movs	r3, #20
 800080c:	001a      	movs	r2, r3
 800080e:	2100      	movs	r1, #0
 8000810:	f003 f8a8 	bl	8003964 <memset>
  if(huart->Instance==USART2)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a1c      	ldr	r2, [pc, #112]	; (800088c <HAL_UART_MspInit+0x90>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d131      	bne.n	8000882 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <HAL_UART_MspInit+0x94>)
 8000820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <HAL_UART_MspInit+0x94>)
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	0289      	lsls	r1, r1, #10
 8000828:	430a      	orrs	r2, r1
 800082a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <HAL_UART_MspInit+0x94>)
 800082e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_UART_MspInit+0x94>)
 8000832:	2101      	movs	r1, #1
 8000834:	430a      	orrs	r2, r1
 8000836:	62da      	str	r2, [r3, #44]	; 0x2c
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_UART_MspInit+0x94>)
 800083a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083c:	2201      	movs	r2, #1
 800083e:	4013      	ands	r3, r2
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000844:	0021      	movs	r1, r4
 8000846:	187b      	adds	r3, r7, r1
 8000848:	220c      	movs	r2, #12
 800084a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2202      	movs	r2, #2
 8000850:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2203      	movs	r2, #3
 800085c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2204      	movs	r2, #4
 8000862:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	187a      	adds	r2, r7, r1
 8000866:	23a0      	movs	r3, #160	; 0xa0
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	0011      	movs	r1, r2
 800086c:	0018      	movs	r0, r3
 800086e:	f000 fa5f 	bl	8000d30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	201c      	movs	r0, #28
 8000878:	f000 f9a0 	bl	8000bbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800087c:	201c      	movs	r0, #28
 800087e:	f000 f9b2 	bl	8000be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b009      	add	sp, #36	; 0x24
 8000888:	bd90      	pop	{r4, r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	40004400 	.word	0x40004400
 8000890:	40021000 	.word	0x40021000

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <NMI_Handler+0x4>

0800089a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <HardFault_Handler+0x4>

080008a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b8:	f000 f894 	bl	80009e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <USART2_IRQHandler+0x14>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f001 fd16 	bl	80022fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	2000002c 	.word	0x2000002c

080008dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008ec:	f7ff fff6 	bl	80008dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480c      	ldr	r0, [pc, #48]	; (8000924 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490d      	ldr	r1, [pc, #52]	; (8000928 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0d      	ldr	r2, [pc, #52]	; (800092c <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0a      	ldr	r4, [pc, #40]	; (8000934 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000916:	f003 f82d 	bl	8003974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800091a:	f7ff fdcd 	bl	80004b8 <main>

0800091e <LoopForever>:

LoopForever:
    b LoopForever
 800091e:	e7fe      	b.n	800091e <LoopForever>
  ldr   r0, =_estack
 8000920:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000928:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800092c:	08003a70 	.word	0x08003a70
  ldr r2, =_sbss
 8000930:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000934:	20000124 	.word	0x20000124

08000938 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000938:	e7fe      	b.n	8000938 <ADC1_COMP_IRQHandler>
	...

0800093c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	2200      	movs	r2, #0
 8000946:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_Init+0x3c>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_Init+0x3c>)
 800094e:	2140      	movs	r1, #64	; 0x40
 8000950:	430a      	orrs	r2, r1
 8000952:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000954:	2000      	movs	r0, #0
 8000956:	f000 f811 	bl	800097c <HAL_InitTick>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d003      	beq.n	8000966 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	e001      	b.n	800096a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000966:	f7ff ff35 	bl	80007d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781b      	ldrb	r3, [r3, #0]
}
 800096e:	0018      	movs	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40022000 	.word	0x40022000

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <HAL_InitTick+0x5c>)
 8000986:	681c      	ldr	r4, [r3, #0]
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <HAL_InitTick+0x60>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	0019      	movs	r1, r3
 800098e:	23fa      	movs	r3, #250	; 0xfa
 8000990:	0098      	lsls	r0, r3, #2
 8000992:	f7ff fbc1 	bl	8000118 <__udivsi3>
 8000996:	0003      	movs	r3, r0
 8000998:	0019      	movs	r1, r3
 800099a:	0020      	movs	r0, r4
 800099c:	f7ff fbbc 	bl	8000118 <__udivsi3>
 80009a0:	0003      	movs	r3, r0
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 f92f 	bl	8000c06 <HAL_SYSTICK_Config>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	e00f      	b.n	80009d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d80b      	bhi.n	80009ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	2301      	movs	r3, #1
 80009ba:	425b      	negs	r3, r3
 80009bc:	2200      	movs	r2, #0
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 f8fc 	bl	8000bbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_InitTick+0x64>)
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	e000      	b.n	80009d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b003      	add	sp, #12
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	20000004 	.word	0x20000004
 80009dc:	2000000c 	.word	0x2000000c
 80009e0:	20000008 	.word	0x20000008

080009e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_IncTick+0x1c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	001a      	movs	r2, r3
 80009ee:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_IncTick+0x20>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	18d2      	adds	r2, r2, r3
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_IncTick+0x20>)
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	2000000c 	.word	0x2000000c
 8000a04:	20000120 	.word	0x20000120

08000a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a0c:	4b02      	ldr	r3, [pc, #8]	; (8000a18 <HAL_GetTick+0x10>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	20000120 	.word	0x20000120

08000a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a24:	f7ff fff0 	bl	8000a08 <HAL_GetTick>
 8000a28:	0003      	movs	r3, r0
 8000a2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	3301      	adds	r3, #1
 8000a34:	d005      	beq.n	8000a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <HAL_Delay+0x44>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	189b      	adds	r3, r3, r2
 8000a40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	f7ff ffe0 	bl	8000a08 <HAL_GetTick>
 8000a48:	0002      	movs	r2, r0
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	1ad3      	subs	r3, r2, r3
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d8f7      	bhi.n	8000a44 <HAL_Delay+0x28>
  {
  }
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	2000000c 	.word	0x2000000c

08000a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	0002      	movs	r2, r0
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b7f      	cmp	r3, #127	; 0x7f
 8000a76:	d809      	bhi.n	8000a8c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	001a      	movs	r2, r3
 8000a7e:	231f      	movs	r3, #31
 8000a80:	401a      	ands	r2, r3
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <__NVIC_EnableIRQ+0x30>)
 8000a84:	2101      	movs	r1, #1
 8000a86:	4091      	lsls	r1, r2
 8000a88:	000a      	movs	r2, r1
 8000a8a:	601a      	str	r2, [r3, #0]
  }
}
 8000a8c:	46c0      	nop			; (mov r8, r8)
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	e000e100 	.word	0xe000e100

08000a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	0002      	movs	r2, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8000aac:	d828      	bhi.n	8000b00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aae:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <__NVIC_SetPriority+0xd4>)
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	33c0      	adds	r3, #192	; 0xc0
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	589b      	ldr	r3, [r3, r2]
 8000abe:	1dfa      	adds	r2, r7, #7
 8000ac0:	7812      	ldrb	r2, [r2, #0]
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	400a      	ands	r2, r1
 8000ac8:	00d2      	lsls	r2, r2, #3
 8000aca:	21ff      	movs	r1, #255	; 0xff
 8000acc:	4091      	lsls	r1, r2
 8000ace:	000a      	movs	r2, r1
 8000ad0:	43d2      	mvns	r2, r2
 8000ad2:	401a      	ands	r2, r3
 8000ad4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	019b      	lsls	r3, r3, #6
 8000ada:	22ff      	movs	r2, #255	; 0xff
 8000adc:	401a      	ands	r2, r3
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	4003      	ands	r3, r0
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aec:	481f      	ldr	r0, [pc, #124]	; (8000b6c <__NVIC_SetPriority+0xd4>)
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	b25b      	sxtb	r3, r3
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	430a      	orrs	r2, r1
 8000af8:	33c0      	adds	r3, #192	; 0xc0
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000afe:	e031      	b.n	8000b64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b00:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <__NVIC_SetPriority+0xd8>)
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	0019      	movs	r1, r3
 8000b08:	230f      	movs	r3, #15
 8000b0a:	400b      	ands	r3, r1
 8000b0c:	3b08      	subs	r3, #8
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	3306      	adds	r3, #6
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	18d3      	adds	r3, r2, r3
 8000b16:	3304      	adds	r3, #4
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	1dfa      	adds	r2, r7, #7
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	0011      	movs	r1, r2
 8000b20:	2203      	movs	r2, #3
 8000b22:	400a      	ands	r2, r1
 8000b24:	00d2      	lsls	r2, r2, #3
 8000b26:	21ff      	movs	r1, #255	; 0xff
 8000b28:	4091      	lsls	r1, r2
 8000b2a:	000a      	movs	r2, r1
 8000b2c:	43d2      	mvns	r2, r2
 8000b2e:	401a      	ands	r2, r3
 8000b30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	019b      	lsls	r3, r3, #6
 8000b36:	22ff      	movs	r2, #255	; 0xff
 8000b38:	401a      	ands	r2, r3
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	0018      	movs	r0, r3
 8000b40:	2303      	movs	r3, #3
 8000b42:	4003      	ands	r3, r0
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <__NVIC_SetPriority+0xd8>)
 8000b4a:	1dfb      	adds	r3, r7, #7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	001c      	movs	r4, r3
 8000b50:	230f      	movs	r3, #15
 8000b52:	4023      	ands	r3, r4
 8000b54:	3b08      	subs	r3, #8
 8000b56:	089b      	lsrs	r3, r3, #2
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	3306      	adds	r3, #6
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	18c3      	adds	r3, r0, r3
 8000b60:	3304      	adds	r3, #4
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b003      	add	sp, #12
 8000b6a:	bd90      	pop	{r4, r7, pc}
 8000b6c:	e000e100 	.word	0xe000e100
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	1e5a      	subs	r2, r3, #1
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	045b      	lsls	r3, r3, #17
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d301      	bcc.n	8000b8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b88:	2301      	movs	r3, #1
 8000b8a:	e010      	b.n	8000bae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <SysTick_Config+0x44>)
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	3a01      	subs	r2, #1
 8000b92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b94:	2301      	movs	r3, #1
 8000b96:	425b      	negs	r3, r3
 8000b98:	2103      	movs	r1, #3
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff ff7c 	bl	8000a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <SysTick_Config+0x44>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <SysTick_Config+0x44>)
 8000ba8:	2207      	movs	r2, #7
 8000baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	0018      	movs	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b002      	add	sp, #8
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	e000e010 	.word	0xe000e010

08000bbc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	1c02      	adds	r2, r0, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b25b      	sxtb	r3, r3
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff ff5d 	bl	8000a98 <__NVIC_SetPriority>
}
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b004      	add	sp, #16
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	0002      	movs	r2, r0
 8000bee:	1dfb      	adds	r3, r7, #7
 8000bf0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f7ff ff33 	bl	8000a64 <__NVIC_EnableIRQ>
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b002      	add	sp, #8
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	0018      	movs	r0, r3
 8000c12:	f7ff ffaf 	bl	8000b74 <SysTick_Config>
 8000c16:	0003      	movs	r3, r0
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2225      	movs	r2, #37	; 0x25
 8000c34:	5c9b      	ldrb	r3, [r3, r2]
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d008      	beq.n	8000c4e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2204      	movs	r2, #4
 8000c40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2224      	movs	r2, #36	; 0x24
 8000c46:	2100      	movs	r1, #0
 8000c48:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e024      	b.n	8000c98 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	210e      	movs	r1, #14
 8000c5a:	438a      	bics	r2, r1
 8000c5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2101      	movs	r1, #1
 8000c6a:	438a      	bics	r2, r1
 8000c6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	221c      	movs	r2, #28
 8000c74:	401a      	ands	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	000a      	movs	r2, r1
 8000c80:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2225      	movs	r2, #37	; 0x25
 8000c86:	2101      	movs	r1, #1
 8000c88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2224      	movs	r2, #36	; 0x24
 8000c8e:	2100      	movs	r1, #0
 8000c90:	5499      	strb	r1, [r3, r2]

    return status;
 8000c92:	230f      	movs	r3, #15
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000c98:	0018      	movs	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b004      	add	sp, #16
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ca8:	210f      	movs	r1, #15
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2225      	movs	r2, #37	; 0x25
 8000cb4:	5c9b      	ldrb	r3, [r3, r2]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d006      	beq.n	8000cca <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	e02a      	b.n	8000d20 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	210e      	movs	r1, #14
 8000cd6:	438a      	bics	r2, r1
 8000cd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	438a      	bics	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	221c      	movs	r2, #28
 8000cf0:	401a      	ands	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	4091      	lsls	r1, r2
 8000cfa:	000a      	movs	r2, r1
 8000cfc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2225      	movs	r2, #37	; 0x25
 8000d02:	2101      	movs	r1, #1
 8000d04:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2224      	movs	r2, #36	; 0x24
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d004      	beq.n	8000d20 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	0010      	movs	r0, r2
 8000d1e:	4798      	blx	r3
    }
  }
  return status;
 8000d20:	230f      	movs	r3, #15
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	781b      	ldrb	r3, [r3, #0]
}
 8000d26:	0018      	movs	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b004      	add	sp, #16
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d46:	e14f      	b.n	8000fe8 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4091      	lsls	r1, r2
 8000d52:	000a      	movs	r2, r1
 8000d54:	4013      	ands	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d100      	bne.n	8000d60 <HAL_GPIO_Init+0x30>
 8000d5e:	e140      	b.n	8000fe2 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	2203      	movs	r2, #3
 8000d66:	4013      	ands	r3, r2
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d005      	beq.n	8000d78 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2203      	movs	r2, #3
 8000d72:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d130      	bne.n	8000dda <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	409a      	lsls	r2, r3
 8000d86:	0013      	movs	r3, r2
 8000d88:	43da      	mvns	r2, r3
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	0013      	movs	r3, r2
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dae:	2201      	movs	r2, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
 8000db4:	0013      	movs	r3, r2
 8000db6:	43da      	mvns	r2, r3
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2203      	movs	r2, #3
 8000de0:	4013      	ands	r3, r2
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d017      	beq.n	8000e16 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2203      	movs	r2, #3
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	43da      	mvns	r2, r3
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d123      	bne.n	8000e6a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	08da      	lsrs	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	0092      	lsls	r2, r2, #2
 8000e2c:	58d3      	ldr	r3, [r2, r3]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	2207      	movs	r2, #7
 8000e34:	4013      	ands	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	409a      	lsls	r2, r3
 8000e3c:	0013      	movs	r3, r2
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	691a      	ldr	r2, [r3, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2107      	movs	r1, #7
 8000e4e:	400b      	ands	r3, r1
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3208      	adds	r2, #8
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	6939      	ldr	r1, [r7, #16]
 8000e68:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2203      	movs	r2, #3
 8000e88:	401a      	ands	r2, r3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	23c0      	movs	r3, #192	; 0xc0
 8000ea4:	029b      	lsls	r3, r3, #10
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	d100      	bne.n	8000eac <HAL_GPIO_Init+0x17c>
 8000eaa:	e09a      	b.n	8000fe2 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eac:	4b54      	ldr	r3, [pc, #336]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eb0:	4b53      	ldr	r3, [pc, #332]	; (8001000 <HAL_GPIO_Init+0x2d0>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb8:	4a52      	ldr	r2, [pc, #328]	; (8001004 <HAL_GPIO_Init+0x2d4>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	089b      	lsrs	r3, r3, #2
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	589b      	ldr	r3, [r3, r2]
 8000ec4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2203      	movs	r2, #3
 8000eca:	4013      	ands	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	220f      	movs	r2, #15
 8000ed0:	409a      	lsls	r2, r3
 8000ed2:	0013      	movs	r3, r2
 8000ed4:	43da      	mvns	r2, r3
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	23a0      	movs	r3, #160	; 0xa0
 8000ee0:	05db      	lsls	r3, r3, #23
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d019      	beq.n	8000f1a <HAL_GPIO_Init+0x1ea>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a47      	ldr	r2, [pc, #284]	; (8001008 <HAL_GPIO_Init+0x2d8>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d013      	beq.n	8000f16 <HAL_GPIO_Init+0x1e6>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a46      	ldr	r2, [pc, #280]	; (800100c <HAL_GPIO_Init+0x2dc>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d00d      	beq.n	8000f12 <HAL_GPIO_Init+0x1e2>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a45      	ldr	r2, [pc, #276]	; (8001010 <HAL_GPIO_Init+0x2e0>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d007      	beq.n	8000f0e <HAL_GPIO_Init+0x1de>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a44      	ldr	r2, [pc, #272]	; (8001014 <HAL_GPIO_Init+0x2e4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_GPIO_Init+0x1da>
 8000f06:	2305      	movs	r3, #5
 8000f08:	e008      	b.n	8000f1c <HAL_GPIO_Init+0x1ec>
 8000f0a:	2306      	movs	r3, #6
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x1ec>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e004      	b.n	8000f1c <HAL_GPIO_Init+0x1ec>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x1ec>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x1ec>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	2103      	movs	r1, #3
 8000f20:	400a      	ands	r2, r1
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	4093      	lsls	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f2c:	4935      	ldr	r1, [pc, #212]	; (8001004 <HAL_GPIO_Init+0x2d4>)
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f3a:	4b37      	ldr	r3, [pc, #220]	; (8001018 <HAL_GPIO_Init+0x2e8>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43da      	mvns	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	035b      	lsls	r3, r3, #13
 8000f52:	4013      	ands	r3, r2
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <HAL_GPIO_Init+0x2e8>)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f64:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <HAL_GPIO_Init+0x2e8>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43da      	mvns	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	039b      	lsls	r3, r3, #14
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f88:	4b23      	ldr	r3, [pc, #140]	; (8001018 <HAL_GPIO_Init+0x2e8>)
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000f8e:	4b22      	ldr	r3, [pc, #136]	; (8001018 <HAL_GPIO_Init+0x2e8>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43da      	mvns	r2, r3
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	2380      	movs	r3, #128	; 0x80
 8000fa4:	029b      	lsls	r3, r3, #10
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fb2:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_GPIO_Init+0x2e8>)
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <HAL_GPIO_Init+0x2e8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43da      	mvns	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	025b      	lsls	r3, r3, #9
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_GPIO_Init+0x2e8>)
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	40da      	lsrs	r2, r3
 8000ff0:	1e13      	subs	r3, r2, #0
 8000ff2:	d000      	beq.n	8000ff6 <HAL_GPIO_Init+0x2c6>
 8000ff4:	e6a8      	b.n	8000d48 <HAL_GPIO_Init+0x18>
  }
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b006      	add	sp, #24
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021000 	.word	0x40021000
 8001004:	40010000 	.word	0x40010000
 8001008:	50000400 	.word	0x50000400
 800100c:	50000800 	.word	0x50000800
 8001010:	50000c00 	.word	0x50000c00
 8001014:	50001c00 	.word	0x50001c00
 8001018:	40010400 	.word	0x40010400

0800101c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	0008      	movs	r0, r1
 8001026:	0011      	movs	r1, r2
 8001028:	1cbb      	adds	r3, r7, #2
 800102a:	1c02      	adds	r2, r0, #0
 800102c:	801a      	strh	r2, [r3, #0]
 800102e:	1c7b      	adds	r3, r7, #1
 8001030:	1c0a      	adds	r2, r1, #0
 8001032:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001034:	1c7b      	adds	r3, r7, #1
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d004      	beq.n	8001046 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800103c:	1cbb      	adds	r3, r7, #2
 800103e:	881a      	ldrh	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001044:	e003      	b.n	800104e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001046:	1cbb      	adds	r3, r7, #2
 8001048:	881a      	ldrh	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	46bd      	mov	sp, r7
 8001052:	b002      	add	sp, #8
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	000a      	movs	r2, r1
 8001060:	1cbb      	adds	r3, r7, #2
 8001062:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	695b      	ldr	r3, [r3, #20]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800106a:	1cbb      	adds	r3, r7, #2
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4013      	ands	r3, r2
 8001072:	041a      	lsls	r2, r3, #16
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	43db      	mvns	r3, r3
 8001078:	1cb9      	adds	r1, r7, #2
 800107a:	8809      	ldrh	r1, [r1, #0]
 800107c:	400b      	ands	r3, r1
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	619a      	str	r2, [r3, #24]
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b004      	add	sp, #16
 800108a:	bd80      	pop	{r7, pc}

0800108c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800108c:	b5b0      	push	{r4, r5, r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	f000 fbaf 	bl	80017fe <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010a0:	4bcf      	ldr	r3, [pc, #828]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	220c      	movs	r2, #12
 80010a6:	4013      	ands	r3, r2
 80010a8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010aa:	4bcd      	ldr	r3, [pc, #820]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	025b      	lsls	r3, r3, #9
 80010b2:	4013      	ands	r3, r2
 80010b4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2201      	movs	r2, #1
 80010bc:	4013      	ands	r3, r2
 80010be:	d100      	bne.n	80010c2 <HAL_RCC_OscConfig+0x36>
 80010c0:	e07e      	b.n	80011c0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c2:	6a3b      	ldr	r3, [r7, #32]
 80010c4:	2b08      	cmp	r3, #8
 80010c6:	d007      	beq.n	80010d8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010c8:	6a3b      	ldr	r3, [r7, #32]
 80010ca:	2b0c      	cmp	r3, #12
 80010cc:	d112      	bne.n	80010f4 <HAL_RCC_OscConfig+0x68>
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	025b      	lsls	r3, r3, #9
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d10d      	bne.n	80010f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d8:	4bc1      	ldr	r3, [pc, #772]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	029b      	lsls	r3, r3, #10
 80010e0:	4013      	ands	r3, r2
 80010e2:	d100      	bne.n	80010e6 <HAL_RCC_OscConfig+0x5a>
 80010e4:	e06b      	b.n	80011be <HAL_RCC_OscConfig+0x132>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d167      	bne.n	80011be <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f000 fb85 	bl	80017fe <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	025b      	lsls	r3, r3, #9
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d107      	bne.n	8001110 <HAL_RCC_OscConfig+0x84>
 8001100:	4bb7      	ldr	r3, [pc, #732]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4bb6      	ldr	r3, [pc, #728]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001106:	2180      	movs	r1, #128	; 0x80
 8001108:	0249      	lsls	r1, r1, #9
 800110a:	430a      	orrs	r2, r1
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	e027      	b.n	8001160 <HAL_RCC_OscConfig+0xd4>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	23a0      	movs	r3, #160	; 0xa0
 8001116:	02db      	lsls	r3, r3, #11
 8001118:	429a      	cmp	r2, r3
 800111a:	d10e      	bne.n	800113a <HAL_RCC_OscConfig+0xae>
 800111c:	4bb0      	ldr	r3, [pc, #704]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4baf      	ldr	r3, [pc, #700]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001122:	2180      	movs	r1, #128	; 0x80
 8001124:	02c9      	lsls	r1, r1, #11
 8001126:	430a      	orrs	r2, r1
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	4bad      	ldr	r3, [pc, #692]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4bac      	ldr	r3, [pc, #688]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001130:	2180      	movs	r1, #128	; 0x80
 8001132:	0249      	lsls	r1, r1, #9
 8001134:	430a      	orrs	r2, r1
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	e012      	b.n	8001160 <HAL_RCC_OscConfig+0xd4>
 800113a:	4ba9      	ldr	r3, [pc, #676]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	4ba8      	ldr	r3, [pc, #672]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001140:	49a8      	ldr	r1, [pc, #672]	; (80013e4 <HAL_RCC_OscConfig+0x358>)
 8001142:	400a      	ands	r2, r1
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	4ba6      	ldr	r3, [pc, #664]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	025b      	lsls	r3, r3, #9
 800114e:	4013      	ands	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	4ba2      	ldr	r3, [pc, #648]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4ba1      	ldr	r3, [pc, #644]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 800115a:	49a3      	ldr	r1, [pc, #652]	; (80013e8 <HAL_RCC_OscConfig+0x35c>)
 800115c:	400a      	ands	r2, r1
 800115e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d015      	beq.n	8001194 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001168:	f7ff fc4e 	bl	8000a08 <HAL_GetTick>
 800116c:	0003      	movs	r3, r0
 800116e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001170:	e009      	b.n	8001186 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001172:	f7ff fc49 	bl	8000a08 <HAL_GetTick>
 8001176:	0002      	movs	r2, r0
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b64      	cmp	r3, #100	; 0x64
 800117e:	d902      	bls.n	8001186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	f000 fb3c 	bl	80017fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001186:	4b96      	ldr	r3, [pc, #600]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	029b      	lsls	r3, r3, #10
 800118e:	4013      	ands	r3, r2
 8001190:	d0ef      	beq.n	8001172 <HAL_RCC_OscConfig+0xe6>
 8001192:	e015      	b.n	80011c0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001194:	f7ff fc38 	bl	8000a08 <HAL_GetTick>
 8001198:	0003      	movs	r3, r0
 800119a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800119c:	e008      	b.n	80011b0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800119e:	f7ff fc33 	bl	8000a08 <HAL_GetTick>
 80011a2:	0002      	movs	r2, r0
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b64      	cmp	r3, #100	; 0x64
 80011aa:	d901      	bls.n	80011b0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80011ac:	2303      	movs	r3, #3
 80011ae:	e326      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011b0:	4b8b      	ldr	r3, [pc, #556]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	2380      	movs	r3, #128	; 0x80
 80011b6:	029b      	lsls	r3, r3, #10
 80011b8:	4013      	ands	r3, r2
 80011ba:	d1f0      	bne.n	800119e <HAL_RCC_OscConfig+0x112>
 80011bc:	e000      	b.n	80011c0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2202      	movs	r2, #2
 80011c6:	4013      	ands	r3, r2
 80011c8:	d100      	bne.n	80011cc <HAL_RCC_OscConfig+0x140>
 80011ca:	e08b      	b.n	80012e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011d8:	6a3b      	ldr	r3, [r7, #32]
 80011da:	2b0c      	cmp	r3, #12
 80011dc:	d13e      	bne.n	800125c <HAL_RCC_OscConfig+0x1d0>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d13b      	bne.n	800125c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80011e4:	4b7e      	ldr	r3, [pc, #504]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2204      	movs	r2, #4
 80011ea:	4013      	ands	r3, r2
 80011ec:	d004      	beq.n	80011f8 <HAL_RCC_OscConfig+0x16c>
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e302      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	4b79      	ldr	r3, [pc, #484]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	4a7b      	ldr	r2, [pc, #492]	; (80013ec <HAL_RCC_OscConfig+0x360>)
 80011fe:	4013      	ands	r3, r2
 8001200:	0019      	movs	r1, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	021a      	lsls	r2, r3, #8
 8001208:	4b75      	ldr	r3, [pc, #468]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 800120a:	430a      	orrs	r2, r1
 800120c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800120e:	4b74      	ldr	r3, [pc, #464]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2209      	movs	r2, #9
 8001214:	4393      	bics	r3, r2
 8001216:	0019      	movs	r1, r3
 8001218:	4b71      	ldr	r3, [pc, #452]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	430a      	orrs	r2, r1
 800121e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001220:	f000 fc40 	bl	8001aa4 <HAL_RCC_GetSysClockFreq>
 8001224:	0001      	movs	r1, r0
 8001226:	4b6e      	ldr	r3, [pc, #440]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	091b      	lsrs	r3, r3, #4
 800122c:	220f      	movs	r2, #15
 800122e:	4013      	ands	r3, r2
 8001230:	4a6f      	ldr	r2, [pc, #444]	; (80013f0 <HAL_RCC_OscConfig+0x364>)
 8001232:	5cd3      	ldrb	r3, [r2, r3]
 8001234:	000a      	movs	r2, r1
 8001236:	40da      	lsrs	r2, r3
 8001238:	4b6e      	ldr	r3, [pc, #440]	; (80013f4 <HAL_RCC_OscConfig+0x368>)
 800123a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800123c:	4b6e      	ldr	r3, [pc, #440]	; (80013f8 <HAL_RCC_OscConfig+0x36c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2513      	movs	r5, #19
 8001242:	197c      	adds	r4, r7, r5
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff fb99 	bl	800097c <HAL_InitTick>
 800124a:	0003      	movs	r3, r0
 800124c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800124e:	197b      	adds	r3, r7, r5
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d046      	beq.n	80012e4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001256:	197b      	adds	r3, r7, r5
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	e2d0      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d027      	beq.n	80012b2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001262:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2209      	movs	r2, #9
 8001268:	4393      	bics	r3, r2
 800126a:	0019      	movs	r1, r3
 800126c:	4b5c      	ldr	r3, [pc, #368]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	430a      	orrs	r2, r1
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fbc8 	bl	8000a08 <HAL_GetTick>
 8001278:	0003      	movs	r3, r0
 800127a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800127c:	e008      	b.n	8001290 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff fbc3 	bl	8000a08 <HAL_GetTick>
 8001282:	0002      	movs	r2, r0
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d901      	bls.n	8001290 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e2b6      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001290:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2204      	movs	r2, #4
 8001296:	4013      	ands	r3, r2
 8001298:	d0f1      	beq.n	800127e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129a:	4b51      	ldr	r3, [pc, #324]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4a53      	ldr	r2, [pc, #332]	; (80013ec <HAL_RCC_OscConfig+0x360>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	0019      	movs	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	021a      	lsls	r2, r3, #8
 80012aa:	4b4d      	ldr	r3, [pc, #308]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80012ac:	430a      	orrs	r2, r1
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	e018      	b.n	80012e4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b2:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80012b8:	2101      	movs	r1, #1
 80012ba:	438a      	bics	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012be:	f7ff fba3 	bl	8000a08 <HAL_GetTick>
 80012c2:	0003      	movs	r3, r0
 80012c4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c8:	f7ff fb9e 	bl	8000a08 <HAL_GetTick>
 80012cc:	0002      	movs	r2, r0
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e291      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012da:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2204      	movs	r2, #4
 80012e0:	4013      	ands	r3, r2
 80012e2:	d1f1      	bne.n	80012c8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2210      	movs	r2, #16
 80012ea:	4013      	ands	r3, r2
 80012ec:	d100      	bne.n	80012f0 <HAL_RCC_OscConfig+0x264>
 80012ee:	e0a1      	b.n	8001434 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d140      	bne.n	8001378 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012f6:	4b3a      	ldr	r3, [pc, #232]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4013      	ands	r3, r2
 8001300:	d005      	beq.n	800130e <HAL_RCC_OscConfig+0x282>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e277      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800130e:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	4a3a      	ldr	r2, [pc, #232]	; (80013fc <HAL_RCC_OscConfig+0x370>)
 8001314:	4013      	ands	r3, r2
 8001316:	0019      	movs	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800131c:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 800131e:	430a      	orrs	r2, r1
 8001320:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001322:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	0a19      	lsrs	r1, r3, #8
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	061a      	lsls	r2, r3, #24
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001332:	430a      	orrs	r2, r1
 8001334:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	0b5b      	lsrs	r3, r3, #13
 800133c:	3301      	adds	r3, #1
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	0212      	lsls	r2, r2, #8
 8001342:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	210f      	movs	r1, #15
 800134c:	400b      	ands	r3, r1
 800134e:	4928      	ldr	r1, [pc, #160]	; (80013f0 <HAL_RCC_OscConfig+0x364>)
 8001350:	5ccb      	ldrb	r3, [r1, r3]
 8001352:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <HAL_RCC_OscConfig+0x368>)
 8001356:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001358:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <HAL_RCC_OscConfig+0x36c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2513      	movs	r5, #19
 800135e:	197c      	adds	r4, r7, r5
 8001360:	0018      	movs	r0, r3
 8001362:	f7ff fb0b 	bl	800097c <HAL_InitTick>
 8001366:	0003      	movs	r3, r0
 8001368:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800136a:	197b      	adds	r3, r7, r5
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d060      	beq.n	8001434 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001372:	197b      	adds	r3, r7, r5
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	e242      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d03f      	beq.n	8001400 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001380:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 8001386:	2180      	movs	r1, #128	; 0x80
 8001388:	0049      	lsls	r1, r1, #1
 800138a:	430a      	orrs	r2, r1
 800138c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138e:	f7ff fb3b 	bl	8000a08 <HAL_GetTick>
 8001392:	0003      	movs	r3, r0
 8001394:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001398:	f7ff fb36 	bl	8000a08 <HAL_GetTick>
 800139c:	0002      	movs	r2, r0
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e229      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4013      	ands	r3, r2
 80013b4:	d0f0      	beq.n	8001398 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	4a10      	ldr	r2, [pc, #64]	; (80013fc <HAL_RCC_OscConfig+0x370>)
 80013bc:	4013      	ands	r3, r2
 80013be:	0019      	movs	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80013c6:	430a      	orrs	r2, r1
 80013c8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	0a19      	lsrs	r1, r3, #8
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	061a      	lsls	r2, r3, #24
 80013d8:	4b01      	ldr	r3, [pc, #4]	; (80013e0 <HAL_RCC_OscConfig+0x354>)
 80013da:	430a      	orrs	r2, r1
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	e029      	b.n	8001434 <HAL_RCC_OscConfig+0x3a8>
 80013e0:	40021000 	.word	0x40021000
 80013e4:	fffeffff 	.word	0xfffeffff
 80013e8:	fffbffff 	.word	0xfffbffff
 80013ec:	ffffe0ff 	.word	0xffffe0ff
 80013f0:	080039f4 	.word	0x080039f4
 80013f4:	20000004 	.word	0x20000004
 80013f8:	20000008 	.word	0x20000008
 80013fc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001400:	4bbd      	ldr	r3, [pc, #756]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4bbc      	ldr	r3, [pc, #752]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001406:	49bd      	ldr	r1, [pc, #756]	; (80016fc <HAL_RCC_OscConfig+0x670>)
 8001408:	400a      	ands	r2, r1
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fafc 	bl	8000a08 <HAL_GetTick>
 8001410:	0003      	movs	r3, r0
 8001412:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001416:	f7ff faf7 	bl	8000a08 <HAL_GetTick>
 800141a:	0002      	movs	r2, r0
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e1ea      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001428:	4bb3      	ldr	r3, [pc, #716]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4013      	ands	r3, r2
 8001432:	d1f0      	bne.n	8001416 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2208      	movs	r2, #8
 800143a:	4013      	ands	r3, r2
 800143c:	d036      	beq.n	80014ac <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d019      	beq.n	800147a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001446:	4bac      	ldr	r3, [pc, #688]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800144a:	4bab      	ldr	r3, [pc, #684]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 800144c:	2101      	movs	r1, #1
 800144e:	430a      	orrs	r2, r1
 8001450:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fad9 	bl	8000a08 <HAL_GetTick>
 8001456:	0003      	movs	r3, r0
 8001458:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145c:	f7ff fad4 	bl	8000a08 <HAL_GetTick>
 8001460:	0002      	movs	r2, r0
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e1c7      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800146e:	4ba2      	ldr	r3, [pc, #648]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001472:	2202      	movs	r2, #2
 8001474:	4013      	ands	r3, r2
 8001476:	d0f1      	beq.n	800145c <HAL_RCC_OscConfig+0x3d0>
 8001478:	e018      	b.n	80014ac <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800147a:	4b9f      	ldr	r3, [pc, #636]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 800147c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800147e:	4b9e      	ldr	r3, [pc, #632]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001480:	2101      	movs	r1, #1
 8001482:	438a      	bics	r2, r1
 8001484:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001486:	f7ff fabf 	bl	8000a08 <HAL_GetTick>
 800148a:	0003      	movs	r3, r0
 800148c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff faba 	bl	8000a08 <HAL_GetTick>
 8001494:	0002      	movs	r2, r0
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1ad      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014a2:	4b95      	ldr	r3, [pc, #596]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 80014a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014a6:	2202      	movs	r2, #2
 80014a8:	4013      	ands	r3, r2
 80014aa:	d1f1      	bne.n	8001490 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2204      	movs	r2, #4
 80014b2:	4013      	ands	r3, r2
 80014b4:	d100      	bne.n	80014b8 <HAL_RCC_OscConfig+0x42c>
 80014b6:	e0ae      	b.n	8001616 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b8:	2027      	movs	r0, #39	; 0x27
 80014ba:	183b      	adds	r3, r7, r0
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c0:	4b8d      	ldr	r3, [pc, #564]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 80014c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	055b      	lsls	r3, r3, #21
 80014c8:	4013      	ands	r3, r2
 80014ca:	d109      	bne.n	80014e0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	4b8a      	ldr	r3, [pc, #552]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 80014ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014d0:	4b89      	ldr	r3, [pc, #548]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	0549      	lsls	r1, r1, #21
 80014d6:	430a      	orrs	r2, r1
 80014d8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80014da:	183b      	adds	r3, r7, r0
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	4b87      	ldr	r3, [pc, #540]	; (8001700 <HAL_RCC_OscConfig+0x674>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4013      	ands	r3, r2
 80014ea:	d11a      	bne.n	8001522 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ec:	4b84      	ldr	r3, [pc, #528]	; (8001700 <HAL_RCC_OscConfig+0x674>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b83      	ldr	r3, [pc, #524]	; (8001700 <HAL_RCC_OscConfig+0x674>)
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	0049      	lsls	r1, r1, #1
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fa85 	bl	8000a08 <HAL_GetTick>
 80014fe:	0003      	movs	r3, r0
 8001500:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001504:	f7ff fa80 	bl	8000a08 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e173      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001516:	4b7a      	ldr	r3, [pc, #488]	; (8001700 <HAL_RCC_OscConfig+0x674>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4013      	ands	r3, r2
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	429a      	cmp	r2, r3
 800152c:	d107      	bne.n	800153e <HAL_RCC_OscConfig+0x4b2>
 800152e:	4b72      	ldr	r3, [pc, #456]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001530:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001532:	4b71      	ldr	r3, [pc, #452]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	0049      	lsls	r1, r1, #1
 8001538:	430a      	orrs	r2, r1
 800153a:	651a      	str	r2, [r3, #80]	; 0x50
 800153c:	e031      	b.n	80015a2 <HAL_RCC_OscConfig+0x516>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x4d4>
 8001546:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001548:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800154a:	4b6b      	ldr	r3, [pc, #428]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 800154c:	496b      	ldr	r1, [pc, #428]	; (80016fc <HAL_RCC_OscConfig+0x670>)
 800154e:	400a      	ands	r2, r1
 8001550:	651a      	str	r2, [r3, #80]	; 0x50
 8001552:	4b69      	ldr	r3, [pc, #420]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001554:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001556:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001558:	496a      	ldr	r1, [pc, #424]	; (8001704 <HAL_RCC_OscConfig+0x678>)
 800155a:	400a      	ands	r2, r1
 800155c:	651a      	str	r2, [r3, #80]	; 0x50
 800155e:	e020      	b.n	80015a2 <HAL_RCC_OscConfig+0x516>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	23a0      	movs	r3, #160	; 0xa0
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	429a      	cmp	r2, r3
 800156a:	d10e      	bne.n	800158a <HAL_RCC_OscConfig+0x4fe>
 800156c:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 800156e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001570:	4b61      	ldr	r3, [pc, #388]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	00c9      	lsls	r1, r1, #3
 8001576:	430a      	orrs	r2, r1
 8001578:	651a      	str	r2, [r3, #80]	; 0x50
 800157a:	4b5f      	ldr	r3, [pc, #380]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 800157c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800157e:	4b5e      	ldr	r3, [pc, #376]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	0049      	lsls	r1, r1, #1
 8001584:	430a      	orrs	r2, r1
 8001586:	651a      	str	r2, [r3, #80]	; 0x50
 8001588:	e00b      	b.n	80015a2 <HAL_RCC_OscConfig+0x516>
 800158a:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 800158c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800158e:	4b5a      	ldr	r3, [pc, #360]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001590:	495a      	ldr	r1, [pc, #360]	; (80016fc <HAL_RCC_OscConfig+0x670>)
 8001592:	400a      	ands	r2, r1
 8001594:	651a      	str	r2, [r3, #80]	; 0x50
 8001596:	4b58      	ldr	r3, [pc, #352]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800159a:	4b57      	ldr	r3, [pc, #348]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 800159c:	4959      	ldr	r1, [pc, #356]	; (8001704 <HAL_RCC_OscConfig+0x678>)
 800159e:	400a      	ands	r2, r1
 80015a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d015      	beq.n	80015d6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015aa:	f7ff fa2d 	bl	8000a08 <HAL_GetTick>
 80015ae:	0003      	movs	r3, r0
 80015b0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015b2:	e009      	b.n	80015c8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	f7ff fa28 	bl	8000a08 <HAL_GetTick>
 80015b8:	0002      	movs	r2, r0
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	4a52      	ldr	r2, [pc, #328]	; (8001708 <HAL_RCC_OscConfig+0x67c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e11a      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015c8:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 80015ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015cc:	2380      	movs	r3, #128	; 0x80
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4013      	ands	r3, r2
 80015d2:	d0ef      	beq.n	80015b4 <HAL_RCC_OscConfig+0x528>
 80015d4:	e014      	b.n	8001600 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7ff fa17 	bl	8000a08 <HAL_GetTick>
 80015da:	0003      	movs	r3, r0
 80015dc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015de:	e009      	b.n	80015f4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7ff fa12 	bl	8000a08 <HAL_GetTick>
 80015e4:	0002      	movs	r2, r0
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	4a47      	ldr	r2, [pc, #284]	; (8001708 <HAL_RCC_OscConfig+0x67c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e104      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015f4:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 80015f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015f8:	2380      	movs	r3, #128	; 0x80
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4013      	ands	r3, r2
 80015fe:	d1ef      	bne.n	80015e0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001600:	2327      	movs	r3, #39	; 0x27
 8001602:	18fb      	adds	r3, r7, r3
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d105      	bne.n	8001616 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800160a:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 800160c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800160e:	4b3a      	ldr	r3, [pc, #232]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001610:	493e      	ldr	r1, [pc, #248]	; (800170c <HAL_RCC_OscConfig+0x680>)
 8001612:	400a      	ands	r2, r1
 8001614:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2220      	movs	r2, #32
 800161c:	4013      	ands	r3, r2
 800161e:	d049      	beq.n	80016b4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d026      	beq.n	8001676 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001628:	4b33      	ldr	r3, [pc, #204]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 800162e:	2101      	movs	r1, #1
 8001630:	430a      	orrs	r2, r1
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 800163a:	2101      	movs	r1, #1
 800163c:	430a      	orrs	r2, r1
 800163e:	635a      	str	r2, [r3, #52]	; 0x34
 8001640:	4b33      	ldr	r3, [pc, #204]	; (8001710 <HAL_RCC_OscConfig+0x684>)
 8001642:	6a1a      	ldr	r2, [r3, #32]
 8001644:	4b32      	ldr	r3, [pc, #200]	; (8001710 <HAL_RCC_OscConfig+0x684>)
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	0189      	lsls	r1, r1, #6
 800164a:	430a      	orrs	r2, r1
 800164c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff f9db 	bl	8000a08 <HAL_GetTick>
 8001652:	0003      	movs	r3, r0
 8001654:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001658:	f7ff f9d6 	bl	8000a08 <HAL_GetTick>
 800165c:	0002      	movs	r2, r0
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e0c9      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	2202      	movs	r2, #2
 8001670:	4013      	ands	r3, r2
 8001672:	d0f1      	beq.n	8001658 <HAL_RCC_OscConfig+0x5cc>
 8001674:	e01e      	b.n	80016b4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001676:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	4b1f      	ldr	r3, [pc, #124]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 800167c:	2101      	movs	r1, #1
 800167e:	438a      	bics	r2, r1
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <HAL_RCC_OscConfig+0x684>)
 8001684:	6a1a      	ldr	r2, [r3, #32]
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <HAL_RCC_OscConfig+0x684>)
 8001688:	4922      	ldr	r1, [pc, #136]	; (8001714 <HAL_RCC_OscConfig+0x688>)
 800168a:	400a      	ands	r2, r1
 800168c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168e:	f7ff f9bb 	bl	8000a08 <HAL_GetTick>
 8001692:	0003      	movs	r3, r0
 8001694:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001698:	f7ff f9b6 	bl	8000a08 <HAL_GetTick>
 800169c:	0002      	movs	r2, r0
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e0a9      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2202      	movs	r2, #2
 80016b0:	4013      	ands	r3, r2
 80016b2:	d1f1      	bne.n	8001698 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d100      	bne.n	80016be <HAL_RCC_OscConfig+0x632>
 80016bc:	e09e      	b.n	80017fc <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	d100      	bne.n	80016c6 <HAL_RCC_OscConfig+0x63a>
 80016c4:	e077      	b.n	80017b6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d158      	bne.n	8001780 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ce:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <HAL_RCC_OscConfig+0x66c>)
 80016d4:	4910      	ldr	r1, [pc, #64]	; (8001718 <HAL_RCC_OscConfig+0x68c>)
 80016d6:	400a      	ands	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff f995 	bl	8000a08 <HAL_GetTick>
 80016de:	0003      	movs	r3, r0
 80016e0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016e2:	e01b      	b.n	800171c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e4:	f7ff f990 	bl	8000a08 <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d914      	bls.n	800171c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e083      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	40021000 	.word	0x40021000
 80016fc:	fffffeff 	.word	0xfffffeff
 8001700:	40007000 	.word	0x40007000
 8001704:	fffffbff 	.word	0xfffffbff
 8001708:	00001388 	.word	0x00001388
 800170c:	efffffff 	.word	0xefffffff
 8001710:	40010000 	.word	0x40010000
 8001714:	ffffdfff 	.word	0xffffdfff
 8001718:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800171c:	4b3a      	ldr	r3, [pc, #232]	; (8001808 <HAL_RCC_OscConfig+0x77c>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	049b      	lsls	r3, r3, #18
 8001724:	4013      	ands	r3, r2
 8001726:	d1dd      	bne.n	80016e4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001728:	4b37      	ldr	r3, [pc, #220]	; (8001808 <HAL_RCC_OscConfig+0x77c>)
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	4a37      	ldr	r2, [pc, #220]	; (800180c <HAL_RCC_OscConfig+0x780>)
 800172e:	4013      	ands	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001740:	431a      	orrs	r2, r3
 8001742:	4b31      	ldr	r3, [pc, #196]	; (8001808 <HAL_RCC_OscConfig+0x77c>)
 8001744:	430a      	orrs	r2, r1
 8001746:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001748:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <HAL_RCC_OscConfig+0x77c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <HAL_RCC_OscConfig+0x77c>)
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	0449      	lsls	r1, r1, #17
 8001752:	430a      	orrs	r2, r1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff f957 	bl	8000a08 <HAL_GetTick>
 800175a:	0003      	movs	r3, r0
 800175c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001760:	f7ff f952 	bl	8000a08 <HAL_GetTick>
 8001764:	0002      	movs	r2, r0
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e045      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001772:	4b25      	ldr	r3, [pc, #148]	; (8001808 <HAL_RCC_OscConfig+0x77c>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	049b      	lsls	r3, r3, #18
 800177a:	4013      	ands	r3, r2
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0x6d4>
 800177e:	e03d      	b.n	80017fc <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001780:	4b21      	ldr	r3, [pc, #132]	; (8001808 <HAL_RCC_OscConfig+0x77c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_RCC_OscConfig+0x77c>)
 8001786:	4922      	ldr	r1, [pc, #136]	; (8001810 <HAL_RCC_OscConfig+0x784>)
 8001788:	400a      	ands	r2, r1
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff f93c 	bl	8000a08 <HAL_GetTick>
 8001790:	0003      	movs	r3, r0
 8001792:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff f937 	bl	8000a08 <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e02a      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_RCC_OscConfig+0x77c>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	049b      	lsls	r3, r3, #18
 80017b0:	4013      	ands	r3, r2
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0x70a>
 80017b4:	e022      	b.n	80017fc <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e01d      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_RCC_OscConfig+0x77c>)
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	025b      	lsls	r3, r3, #9
 80017ce:	401a      	ands	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d10f      	bne.n	80017f8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	23f0      	movs	r3, #240	; 0xf0
 80017dc:	039b      	lsls	r3, r3, #14
 80017de:	401a      	ands	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d107      	bne.n	80017f8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	23c0      	movs	r3, #192	; 0xc0
 80017ec:	041b      	lsls	r3, r3, #16
 80017ee:	401a      	ands	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	0018      	movs	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	b00a      	add	sp, #40	; 0x28
 8001804:	bdb0      	pop	{r4, r5, r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	40021000 	.word	0x40021000
 800180c:	ff02ffff 	.word	0xff02ffff
 8001810:	feffffff 	.word	0xfeffffff

08001814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001814:	b5b0      	push	{r4, r5, r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d101      	bne.n	8001828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e128      	b.n	8001a7a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001828:	4b96      	ldr	r3, [pc, #600]	; (8001a84 <HAL_RCC_ClockConfig+0x270>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	4013      	ands	r3, r2
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	429a      	cmp	r2, r3
 8001834:	d91e      	bls.n	8001874 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001836:	4b93      	ldr	r3, [pc, #588]	; (8001a84 <HAL_RCC_ClockConfig+0x270>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2201      	movs	r2, #1
 800183c:	4393      	bics	r3, r2
 800183e:	0019      	movs	r1, r3
 8001840:	4b90      	ldr	r3, [pc, #576]	; (8001a84 <HAL_RCC_ClockConfig+0x270>)
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001848:	f7ff f8de 	bl	8000a08 <HAL_GetTick>
 800184c:	0003      	movs	r3, r0
 800184e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001850:	e009      	b.n	8001866 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001852:	f7ff f8d9 	bl	8000a08 <HAL_GetTick>
 8001856:	0002      	movs	r2, r0
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	4a8a      	ldr	r2, [pc, #552]	; (8001a88 <HAL_RCC_ClockConfig+0x274>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e109      	b.n	8001a7a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b87      	ldr	r3, [pc, #540]	; (8001a84 <HAL_RCC_ClockConfig+0x270>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2201      	movs	r2, #1
 800186c:	4013      	ands	r3, r2
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d1ee      	bne.n	8001852 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2202      	movs	r2, #2
 800187a:	4013      	ands	r3, r2
 800187c:	d009      	beq.n	8001892 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800187e:	4b83      	ldr	r3, [pc, #524]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	22f0      	movs	r2, #240	; 0xf0
 8001884:	4393      	bics	r3, r2
 8001886:	0019      	movs	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	4b7f      	ldr	r3, [pc, #508]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 800188e:	430a      	orrs	r2, r1
 8001890:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2201      	movs	r2, #1
 8001898:	4013      	ands	r3, r2
 800189a:	d100      	bne.n	800189e <HAL_RCC_ClockConfig+0x8a>
 800189c:	e089      	b.n	80019b2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018a6:	4b79      	ldr	r3, [pc, #484]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	029b      	lsls	r3, r3, #10
 80018ae:	4013      	ands	r3, r2
 80018b0:	d120      	bne.n	80018f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0e1      	b.n	8001a7a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018be:	4b73      	ldr	r3, [pc, #460]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	049b      	lsls	r3, r3, #18
 80018c6:	4013      	ands	r3, r2
 80018c8:	d114      	bne.n	80018f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0d5      	b.n	8001a7a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d106      	bne.n	80018e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018d6:	4b6d      	ldr	r3, [pc, #436]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2204      	movs	r2, #4
 80018dc:	4013      	ands	r3, r2
 80018de:	d109      	bne.n	80018f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0ca      	b.n	8001a7a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018e4:	4b69      	ldr	r3, [pc, #420]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4013      	ands	r3, r2
 80018ee:	d101      	bne.n	80018f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e0c2      	b.n	8001a7a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018f4:	4b65      	ldr	r3, [pc, #404]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2203      	movs	r2, #3
 80018fa:	4393      	bics	r3, r2
 80018fc:	0019      	movs	r1, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4b62      	ldr	r3, [pc, #392]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 8001904:	430a      	orrs	r2, r1
 8001906:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001908:	f7ff f87e 	bl	8000a08 <HAL_GetTick>
 800190c:	0003      	movs	r3, r0
 800190e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d111      	bne.n	800193c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001918:	e009      	b.n	800192e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191a:	f7ff f875 	bl	8000a08 <HAL_GetTick>
 800191e:	0002      	movs	r2, r0
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	4a58      	ldr	r2, [pc, #352]	; (8001a88 <HAL_RCC_ClockConfig+0x274>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d901      	bls.n	800192e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e0a5      	b.n	8001a7a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800192e:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	220c      	movs	r2, #12
 8001934:	4013      	ands	r3, r2
 8001936:	2b08      	cmp	r3, #8
 8001938:	d1ef      	bne.n	800191a <HAL_RCC_ClockConfig+0x106>
 800193a:	e03a      	b.n	80019b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d111      	bne.n	8001968 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001944:	e009      	b.n	800195a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001946:	f7ff f85f 	bl	8000a08 <HAL_GetTick>
 800194a:	0002      	movs	r2, r0
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	4a4d      	ldr	r2, [pc, #308]	; (8001a88 <HAL_RCC_ClockConfig+0x274>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d901      	bls.n	800195a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e08f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800195a:	4b4c      	ldr	r3, [pc, #304]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	220c      	movs	r2, #12
 8001960:	4013      	ands	r3, r2
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d1ef      	bne.n	8001946 <HAL_RCC_ClockConfig+0x132>
 8001966:	e024      	b.n	80019b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d11b      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001970:	e009      	b.n	8001986 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001972:	f7ff f849 	bl	8000a08 <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	4a42      	ldr	r2, [pc, #264]	; (8001a88 <HAL_RCC_ClockConfig+0x274>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e079      	b.n	8001a7a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001986:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	220c      	movs	r2, #12
 800198c:	4013      	ands	r3, r2
 800198e:	2b04      	cmp	r3, #4
 8001990:	d1ef      	bne.n	8001972 <HAL_RCC_ClockConfig+0x15e>
 8001992:	e00e      	b.n	80019b2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001994:	f7ff f838 	bl	8000a08 <HAL_GetTick>
 8001998:	0002      	movs	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	4a3a      	ldr	r2, [pc, #232]	; (8001a88 <HAL_RCC_ClockConfig+0x274>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e068      	b.n	8001a7a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80019a8:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	220c      	movs	r2, #12
 80019ae:	4013      	ands	r3, r2
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019b2:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <HAL_RCC_ClockConfig+0x270>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2201      	movs	r2, #1
 80019b8:	4013      	ands	r3, r2
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d21e      	bcs.n	80019fe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c0:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <HAL_RCC_ClockConfig+0x270>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2201      	movs	r2, #1
 80019c6:	4393      	bics	r3, r2
 80019c8:	0019      	movs	r1, r3
 80019ca:	4b2e      	ldr	r3, [pc, #184]	; (8001a84 <HAL_RCC_ClockConfig+0x270>)
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019d2:	f7ff f819 	bl	8000a08 <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	e009      	b.n	80019f0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7ff f814 	bl	8000a08 <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	4a28      	ldr	r2, [pc, #160]	; (8001a88 <HAL_RCC_ClockConfig+0x274>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e044      	b.n	8001a7a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <HAL_RCC_ClockConfig+0x270>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2201      	movs	r2, #1
 80019f6:	4013      	ands	r3, r2
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d1ee      	bne.n	80019dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2204      	movs	r2, #4
 8001a04:	4013      	ands	r3, r2
 8001a06:	d009      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4a20      	ldr	r2, [pc, #128]	; (8001a90 <HAL_RCC_ClockConfig+0x27c>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	0019      	movs	r1, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68da      	ldr	r2, [r3, #12]
 8001a16:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2208      	movs	r2, #8
 8001a22:	4013      	ands	r3, r2
 8001a24:	d00a      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	4a1a      	ldr	r2, [pc, #104]	; (8001a94 <HAL_RCC_ClockConfig+0x280>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	0019      	movs	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	00da      	lsls	r2, r3, #3
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a3c:	f000 f832 	bl	8001aa4 <HAL_RCC_GetSysClockFreq>
 8001a40:	0001      	movs	r1, r0
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_RCC_ClockConfig+0x278>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	220f      	movs	r2, #15
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <HAL_RCC_ClockConfig+0x284>)
 8001a4e:	5cd3      	ldrb	r3, [r2, r3]
 8001a50:	000a      	movs	r2, r1
 8001a52:	40da      	lsrs	r2, r3
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_RCC_ClockConfig+0x288>)
 8001a56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_RCC_ClockConfig+0x28c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	250b      	movs	r5, #11
 8001a5e:	197c      	adds	r4, r7, r5
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7fe ff8b 	bl	800097c <HAL_InitTick>
 8001a66:	0003      	movs	r3, r0
 8001a68:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001a6a:	197b      	adds	r3, r7, r5
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001a72:	197b      	adds	r3, r7, r5
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b004      	add	sp, #16
 8001a80:	bdb0      	pop	{r4, r5, r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	40022000 	.word	0x40022000
 8001a88:	00001388 	.word	0x00001388
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	fffff8ff 	.word	0xfffff8ff
 8001a94:	ffffc7ff 	.word	0xffffc7ff
 8001a98:	080039f4 	.word	0x080039f4
 8001a9c:	20000004 	.word	0x20000004
 8001aa0:	20000008 	.word	0x20000008

08001aa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa4:	b5b0      	push	{r4, r5, r7, lr}
 8001aa6:	b08e      	sub	sp, #56	; 0x38
 8001aa8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001aaa:	4b4c      	ldr	r3, [pc, #304]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x138>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b0c      	cmp	r3, #12
 8001ab8:	d014      	beq.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8001aba:	d900      	bls.n	8001abe <HAL_RCC_GetSysClockFreq+0x1a>
 8001abc:	e07b      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x112>
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d002      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x24>
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d00b      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0x3a>
 8001ac6:	e076      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ac8:	4b44      	ldr	r3, [pc, #272]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x138>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2210      	movs	r2, #16
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d002      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001ad2:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001ad6:	e07c      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001ad8:	4b42      	ldr	r3, [pc, #264]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001ada:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001adc:	e079      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ade:	4b42      	ldr	r3, [pc, #264]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ae0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ae2:	e076      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae6:	0c9a      	lsrs	r2, r3, #18
 8001ae8:	230f      	movs	r3, #15
 8001aea:	401a      	ands	r2, r3
 8001aec:	4b3f      	ldr	r3, [pc, #252]	; (8001bec <HAL_RCC_GetSysClockFreq+0x148>)
 8001aee:	5c9b      	ldrb	r3, [r3, r2]
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af4:	0d9a      	lsrs	r2, r3, #22
 8001af6:	2303      	movs	r3, #3
 8001af8:	4013      	ands	r3, r2
 8001afa:	3301      	adds	r3, #1
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001afe:	4b37      	ldr	r3, [pc, #220]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x138>)
 8001b00:	68da      	ldr	r2, [r3, #12]
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	025b      	lsls	r3, r3, #9
 8001b06:	4013      	ands	r3, r2
 8001b08:	d01a      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	4a35      	ldr	r2, [pc, #212]	; (8001be8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b14:	2300      	movs	r3, #0
 8001b16:	69b8      	ldr	r0, [r7, #24]
 8001b18:	69f9      	ldr	r1, [r7, #28]
 8001b1a:	f7fe fba9 	bl	8000270 <__aeabi_lmul>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	000b      	movs	r3, r1
 8001b22:	0010      	movs	r0, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f7fe fb7d 	bl	8000230 <__aeabi_uldivmod>
 8001b36:	0002      	movs	r2, r0
 8001b38:	000b      	movs	r3, r1
 8001b3a:	0013      	movs	r3, r2
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b3e:	e037      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b40:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x138>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2210      	movs	r2, #16
 8001b46:	4013      	ands	r3, r2
 8001b48:	d01a      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4a23      	ldr	r2, [pc, #140]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b54:	2300      	movs	r3, #0
 8001b56:	68b8      	ldr	r0, [r7, #8]
 8001b58:	68f9      	ldr	r1, [r7, #12]
 8001b5a:	f7fe fb89 	bl	8000270 <__aeabi_lmul>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	000b      	movs	r3, r1
 8001b62:	0010      	movs	r0, r2
 8001b64:	0019      	movs	r1, r3
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f7fe fb5d 	bl	8000230 <__aeabi_uldivmod>
 8001b76:	0002      	movs	r2, r0
 8001b78:	000b      	movs	r3, r1
 8001b7a:	0013      	movs	r3, r2
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b7e:	e017      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b82:	0018      	movs	r0, r3
 8001b84:	2300      	movs	r3, #0
 8001b86:	0019      	movs	r1, r3
 8001b88:	4a16      	ldr	r2, [pc, #88]	; (8001be4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f7fe fb70 	bl	8000270 <__aeabi_lmul>
 8001b90:	0002      	movs	r2, r0
 8001b92:	000b      	movs	r3, r1
 8001b94:	0010      	movs	r0, r2
 8001b96:	0019      	movs	r1, r3
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	001c      	movs	r4, r3
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	001d      	movs	r5, r3
 8001ba0:	0022      	movs	r2, r4
 8001ba2:	002b      	movs	r3, r5
 8001ba4:	f7fe fb44 	bl	8000230 <__aeabi_uldivmod>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	000b      	movs	r3, r1
 8001bac:	0013      	movs	r3, r2
 8001bae:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bb4:	e00d      	b.n	8001bd2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x138>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	0b5b      	lsrs	r3, r3, #13
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	0212      	lsls	r2, r2, #8
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	0013      	movs	r3, r2
 8001bce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bd0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b00e      	add	sp, #56	; 0x38
 8001bda:	bdb0      	pop	{r4, r5, r7, pc}
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	003d0900 	.word	0x003d0900
 8001be4:	00f42400 	.word	0x00f42400
 8001be8:	007a1200 	.word	0x007a1200
 8001bec:	08003a0c 	.word	0x08003a0c

08001bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf4:	4b02      	ldr	r3, [pc, #8]	; (8001c00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
}
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c08:	f7ff fff2 	bl	8001bf0 <HAL_RCC_GetHCLKFreq>
 8001c0c:	0001      	movs	r1, r0
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	0a1b      	lsrs	r3, r3, #8
 8001c14:	2207      	movs	r2, #7
 8001c16:	4013      	ands	r3, r2
 8001c18:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c1a:	5cd3      	ldrb	r3, [r2, r3]
 8001c1c:	40d9      	lsrs	r1, r3
 8001c1e:	000b      	movs	r3, r1
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08003a04 	.word	0x08003a04

08001c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c34:	f7ff ffdc 	bl	8001bf0 <HAL_RCC_GetHCLKFreq>
 8001c38:	0001      	movs	r1, r0
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	0adb      	lsrs	r3, r3, #11
 8001c40:	2207      	movs	r2, #7
 8001c42:	4013      	ands	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c46:	5cd3      	ldrb	r3, [r2, r3]
 8001c48:	40d9      	lsrs	r1, r3
 8001c4a:	000b      	movs	r3, r1
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08003a04 	.word	0x08003a04

08001c5c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001c64:	2317      	movs	r3, #23
 8001c66:	18fb      	adds	r3, r7, r3
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2220      	movs	r2, #32
 8001c72:	4013      	ands	r3, r2
 8001c74:	d106      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	011b      	lsls	r3, r3, #4
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d100      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001c82:	e104      	b.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c84:	4bb1      	ldr	r3, [pc, #708]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	055b      	lsls	r3, r3, #21
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d10a      	bne.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c90:	4bae      	ldr	r3, [pc, #696]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c94:	4bad      	ldr	r3, [pc, #692]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c96:	2180      	movs	r1, #128	; 0x80
 8001c98:	0549      	lsls	r1, r1, #21
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c9e:	2317      	movs	r3, #23
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	4baa      	ldr	r3, [pc, #680]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d11a      	bne.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb2:	4ba7      	ldr	r3, [pc, #668]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4ba6      	ldr	r3, [pc, #664]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001cb8:	2180      	movs	r1, #128	; 0x80
 8001cba:	0049      	lsls	r1, r1, #1
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc0:	f7fe fea2 	bl	8000a08 <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	e008      	b.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cca:	f7fe fe9d 	bl	8000a08 <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b64      	cmp	r3, #100	; 0x64
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e133      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cdc:	4b9c      	ldr	r3, [pc, #624]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001ce8:	4b98      	ldr	r3, [pc, #608]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	23c0      	movs	r3, #192	; 0xc0
 8001cee:	039b      	lsls	r3, r3, #14
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	23c0      	movs	r3, #192	; 0xc0
 8001cfa:	039b      	lsls	r3, r3, #14
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d107      	bne.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	23c0      	movs	r3, #192	; 0xc0
 8001d0a:	039b      	lsls	r3, r3, #14
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d013      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	23c0      	movs	r3, #192	; 0xc0
 8001d1a:	029b      	lsls	r3, r3, #10
 8001d1c:	401a      	ands	r2, r3
 8001d1e:	23c0      	movs	r3, #192	; 0xc0
 8001d20:	029b      	lsls	r3, r3, #10
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d10a      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001d26:	4b89      	ldr	r3, [pc, #548]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	029b      	lsls	r3, r3, #10
 8001d2e:	401a      	ands	r2, r3
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	029b      	lsls	r3, r3, #10
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d101      	bne.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e103      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001d3c:	4b83      	ldr	r3, [pc, #524]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d40:	23c0      	movs	r3, #192	; 0xc0
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	4013      	ands	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d049      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	23c0      	movs	r3, #192	; 0xc0
 8001d54:	029b      	lsls	r3, r3, #10
 8001d56:	4013      	ands	r3, r2
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d004      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2220      	movs	r2, #32
 8001d64:	4013      	ands	r3, r2
 8001d66:	d10d      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	23c0      	movs	r3, #192	; 0xc0
 8001d6e:	029b      	lsls	r3, r3, #10
 8001d70:	4013      	ands	r3, r2
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d034      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	4013      	ands	r3, r2
 8001d82:	d02e      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001d84:	4b71      	ldr	r3, [pc, #452]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d88:	4a72      	ldr	r2, [pc, #456]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d8e:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d92:	4b6e      	ldr	r3, [pc, #440]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	0309      	lsls	r1, r1, #12
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d9c:	4b6b      	ldr	r3, [pc, #428]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001da0:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001da2:	496d      	ldr	r1, [pc, #436]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001da4:	400a      	ands	r2, r1
 8001da6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001da8:	4b68      	ldr	r3, [pc, #416]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4013      	ands	r3, r2
 8001db6:	d014      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7fe fe26 	bl	8000a08 <HAL_GetTick>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dc0:	e009      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7fe fe21 	bl	8000a08 <HAL_GetTick>
 8001dc6:	0002      	movs	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	4a63      	ldr	r2, [pc, #396]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e0b6      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001dd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4013      	ands	r3, r2
 8001de0:	d0ef      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	2380      	movs	r3, #128	; 0x80
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	4013      	ands	r3, r2
 8001dec:	d01f      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	23c0      	movs	r3, #192	; 0xc0
 8001df4:	029b      	lsls	r3, r3, #10
 8001df6:	401a      	ands	r2, r3
 8001df8:	23c0      	movs	r3, #192	; 0xc0
 8001dfa:	029b      	lsls	r3, r3, #10
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d10c      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001e00:	4b52      	ldr	r3, [pc, #328]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a56      	ldr	r2, [pc, #344]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	23c0      	movs	r3, #192	; 0xc0
 8001e10:	039b      	lsls	r3, r3, #14
 8001e12:	401a      	ands	r2, r3
 8001e14:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	23c0      	movs	r3, #192	; 0xc0
 8001e24:	029b      	lsls	r3, r3, #10
 8001e26:	401a      	ands	r2, r3
 8001e28:	4b48      	ldr	r3, [pc, #288]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2220      	movs	r2, #32
 8001e34:	4013      	ands	r3, r2
 8001e36:	d01f      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	23c0      	movs	r3, #192	; 0xc0
 8001e3e:	029b      	lsls	r3, r3, #10
 8001e40:	401a      	ands	r2, r3
 8001e42:	23c0      	movs	r3, #192	; 0xc0
 8001e44:	029b      	lsls	r3, r3, #10
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001e4a:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a44      	ldr	r2, [pc, #272]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	23c0      	movs	r3, #192	; 0xc0
 8001e5a:	039b      	lsls	r3, r3, #14
 8001e5c:	401a      	ands	r2, r3
 8001e5e:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e66:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	23c0      	movs	r3, #192	; 0xc0
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	401a      	ands	r2, r3
 8001e72:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e78:	2317      	movs	r3, #23
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d105      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e82:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e86:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e88:	4936      	ldr	r1, [pc, #216]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2201      	movs	r2, #1
 8001e94:	4013      	ands	r3, r2
 8001e96:	d009      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e98:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	4393      	bics	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	4b29      	ldr	r3, [pc, #164]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d009      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eb6:	4b25      	ldr	r3, [pc, #148]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	220c      	movs	r2, #12
 8001ebc:	4393      	bics	r3, r2
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2204      	movs	r2, #4
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed8:	4a23      	ldr	r2, [pc, #140]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	0019      	movs	r1, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2208      	movs	r2, #8
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d009      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699a      	ldr	r2, [r3, #24]
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f02:	430a      	orrs	r2, r1
 8001f04:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2240      	movs	r2, #64	; 0x40
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d009      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f14:	4a16      	ldr	r2, [pc, #88]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1a      	ldr	r2, [r3, #32]
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f20:	430a      	orrs	r2, r1
 8001f22:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2280      	movs	r2, #128	; 0x80
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	0019      	movs	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69da      	ldr	r2, [r3, #28]
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	0018      	movs	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b006      	add	sp, #24
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40007000 	.word	0x40007000
 8001f54:	fffcffff 	.word	0xfffcffff
 8001f58:	fff7ffff 	.word	0xfff7ffff
 8001f5c:	00001388 	.word	0x00001388
 8001f60:	ffcfffff 	.word	0xffcfffff
 8001f64:	efffffff 	.word	0xefffffff
 8001f68:	fffff3ff 	.word	0xfffff3ff
 8001f6c:	ffffcfff 	.word	0xffffcfff
 8001f70:	fbffffff 	.word	0xfbffffff
 8001f74:	fff3ffff 	.word	0xfff3ffff

08001f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e044      	b.n	8002014 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d107      	bne.n	8001fa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2278      	movs	r2, #120	; 0x78
 8001f96:	2100      	movs	r1, #0
 8001f98:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7fe fc2d 	bl	80007fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2224      	movs	r2, #36	; 0x24
 8001fa6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f000 fc94 	bl	80028e8 <UART_SetConfig>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e024      	b.n	8002014 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d003      	beq.n	8001fda <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f000 ff0b 	bl	8002df0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	490d      	ldr	r1, [pc, #52]	; (800201c <HAL_UART_Init+0xa4>)
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	212a      	movs	r1, #42	; 0x2a
 8001ff6:	438a      	bics	r2, r1
 8001ff8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2101      	movs	r1, #1
 8002006:	430a      	orrs	r2, r1
 8002008:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	0018      	movs	r0, r3
 800200e:	f000 ffa3 	bl	8002f58 <UART_CheckIdleState>
 8002012:	0003      	movs	r3, r0
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}
 800201c:	ffffb7ff 	.word	0xffffb7ff

08002020 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af02      	add	r7, sp, #8
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	1dbb      	adds	r3, r7, #6
 800202e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002034:	2b20      	cmp	r3, #32
 8002036:	d000      	beq.n	800203a <HAL_UART_Transmit+0x1a>
 8002038:	e08c      	b.n	8002154 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_UART_Transmit+0x28>
 8002040:	1dbb      	adds	r3, r7, #6
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e084      	b.n	8002156 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	015b      	lsls	r3, r3, #5
 8002054:	429a      	cmp	r2, r3
 8002056:	d109      	bne.n	800206c <HAL_UART_Transmit+0x4c>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2201      	movs	r2, #1
 8002064:	4013      	ands	r3, r2
 8002066:	d001      	beq.n	800206c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e074      	b.n	8002156 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2284      	movs	r2, #132	; 0x84
 8002070:	2100      	movs	r1, #0
 8002072:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2221      	movs	r2, #33	; 0x21
 8002078:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800207a:	f7fe fcc5 	bl	8000a08 <HAL_GetTick>
 800207e:	0003      	movs	r3, r0
 8002080:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	1dba      	adds	r2, r7, #6
 8002086:	2150      	movs	r1, #80	; 0x50
 8002088:	8812      	ldrh	r2, [r2, #0]
 800208a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	1dba      	adds	r2, r7, #6
 8002090:	2152      	movs	r1, #82	; 0x52
 8002092:	8812      	ldrh	r2, [r2, #0]
 8002094:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	015b      	lsls	r3, r3, #5
 800209e:	429a      	cmp	r2, r3
 80020a0:	d108      	bne.n	80020b4 <HAL_UART_Transmit+0x94>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d104      	bne.n	80020b4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	e003      	b.n	80020bc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020b8:	2300      	movs	r3, #0
 80020ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020bc:	e02f      	b.n	800211e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	0013      	movs	r3, r2
 80020c8:	2200      	movs	r2, #0
 80020ca:	2180      	movs	r1, #128	; 0x80
 80020cc:	f000 ffec 	bl	80030a8 <UART_WaitOnFlagUntilTimeout>
 80020d0:	1e03      	subs	r3, r0, #0
 80020d2:	d004      	beq.n	80020de <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2220      	movs	r2, #32
 80020d8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e03b      	b.n	8002156 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10b      	bne.n	80020fc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	001a      	movs	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	05d2      	lsls	r2, r2, #23
 80020f0:	0dd2      	lsrs	r2, r2, #23
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	3302      	adds	r3, #2
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	e007      	b.n	800210c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	781a      	ldrb	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3301      	adds	r3, #1
 800210a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2252      	movs	r2, #82	; 0x52
 8002110:	5a9b      	ldrh	r3, [r3, r2]
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b299      	uxth	r1, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2252      	movs	r2, #82	; 0x52
 800211c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2252      	movs	r2, #82	; 0x52
 8002122:	5a9b      	ldrh	r3, [r3, r2]
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1c9      	bne.n	80020be <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	0013      	movs	r3, r2
 8002134:	2200      	movs	r2, #0
 8002136:	2140      	movs	r1, #64	; 0x40
 8002138:	f000 ffb6 	bl	80030a8 <UART_WaitOnFlagUntilTimeout>
 800213c:	1e03      	subs	r3, r0, #0
 800213e:	d004      	beq.n	800214a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e005      	b.n	8002156 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2220      	movs	r2, #32
 800214e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	e000      	b.n	8002156 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002154:	2302      	movs	r3, #2
  }
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b008      	add	sp, #32
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	1dbb      	adds	r3, r7, #6
 800216c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002172:	2b20      	cmp	r3, #32
 8002174:	d15b      	bne.n	800222e <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <HAL_UART_Transmit_IT+0x24>
 800217c:	1dbb      	adds	r3, r7, #6
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e053      	b.n	8002230 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	015b      	lsls	r3, r3, #5
 8002190:	429a      	cmp	r2, r3
 8002192:	d109      	bne.n	80021a8 <HAL_UART_Transmit_IT+0x48>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d105      	bne.n	80021a8 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2201      	movs	r2, #1
 80021a0:	4013      	ands	r3, r2
 80021a2:	d001      	beq.n	80021a8 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e043      	b.n	8002230 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1dba      	adds	r2, r7, #6
 80021b2:	2150      	movs	r1, #80	; 0x50
 80021b4:	8812      	ldrh	r2, [r2, #0]
 80021b6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1dba      	adds	r2, r7, #6
 80021bc:	2152      	movs	r1, #82	; 0x52
 80021be:	8812      	ldrh	r2, [r2, #0]
 80021c0:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2284      	movs	r2, #132	; 0x84
 80021cc:	2100      	movs	r1, #0
 80021ce:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2221      	movs	r2, #33	; 0x21
 80021d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	015b      	lsls	r3, r3, #5
 80021de:	429a      	cmp	r2, r3
 80021e0:	d107      	bne.n	80021f2 <HAL_UART_Transmit_IT+0x92>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d103      	bne.n	80021f2 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4a12      	ldr	r2, [pc, #72]	; (8002238 <HAL_UART_Transmit_IT+0xd8>)
 80021ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80021f0:	e002      	b.n	80021f8 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4a11      	ldr	r2, [pc, #68]	; (800223c <HAL_UART_Transmit_IT+0xdc>)
 80021f6:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021f8:	f3ef 8310 	mrs	r3, PRIMASK
 80021fc:	613b      	str	r3, [r7, #16]
  return(result);
 80021fe:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	2301      	movs	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f383 8810 	msr	PRIMASK, r3
}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2180      	movs	r1, #128	; 0x80
 800221a:	430a      	orrs	r2, r1
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	f383 8810 	msr	PRIMASK, r3
}
 8002228:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e000      	b.n	8002230 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800222e:	2302      	movs	r3, #2
  }
}
 8002230:	0018      	movs	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	b008      	add	sp, #32
 8002236:	bd80      	pop	{r7, pc}
 8002238:	080034b9 	.word	0x080034b9
 800223c:	08003407 	.word	0x08003407

08002240 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	1dbb      	adds	r3, r7, #6
 800224c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2280      	movs	r2, #128	; 0x80
 8002252:	589b      	ldr	r3, [r3, r2]
 8002254:	2b20      	cmp	r3, #32
 8002256:	d14a      	bne.n	80022ee <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_UART_Receive_IT+0x26>
 800225e:	1dbb      	adds	r3, r7, #6
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e042      	b.n	80022f0 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	015b      	lsls	r3, r3, #5
 8002272:	429a      	cmp	r2, r3
 8002274:	d109      	bne.n	800228a <HAL_UART_Receive_IT+0x4a>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d105      	bne.n	800228a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	2201      	movs	r2, #1
 8002282:	4013      	ands	r3, r2
 8002284:	d001      	beq.n	800228a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e032      	b.n	80022f0 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a18      	ldr	r2, [pc, #96]	; (80022f8 <HAL_UART_Receive_IT+0xb8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d020      	beq.n	80022dc <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	041b      	lsls	r3, r3, #16
 80022a4:	4013      	ands	r3, r2
 80022a6:	d019      	beq.n	80022dc <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022a8:	f3ef 8310 	mrs	r3, PRIMASK
 80022ac:	613b      	str	r3, [r7, #16]
  return(result);
 80022ae:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	2301      	movs	r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f383 8810 	msr	PRIMASK, r3
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	04c9      	lsls	r1, r1, #19
 80022cc:	430a      	orrs	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	f383 8810 	msr	PRIMASK, r3
}
 80022da:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80022dc:	1dbb      	adds	r3, r7, #6
 80022de:	881a      	ldrh	r2, [r3, #0]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	0018      	movs	r0, r3
 80022e6:	f000 ff49 	bl	800317c <UART_Start_Receive_IT>
 80022ea:	0003      	movs	r3, r0
 80022ec:	e000      	b.n	80022f0 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80022ee:	2302      	movs	r3, #2
  }
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b008      	add	sp, #32
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40004800 	.word	0x40004800

080022fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b0ab      	sub	sp, #172	; 0xac
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	22a4      	movs	r2, #164	; 0xa4
 800230c:	18b9      	adds	r1, r7, r2
 800230e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	20a0      	movs	r0, #160	; 0xa0
 8002318:	1839      	adds	r1, r7, r0
 800231a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	219c      	movs	r1, #156	; 0x9c
 8002324:	1879      	adds	r1, r7, r1
 8002326:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002328:	0011      	movs	r1, r2
 800232a:	18bb      	adds	r3, r7, r2
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a99      	ldr	r2, [pc, #612]	; (8002594 <HAL_UART_IRQHandler+0x298>)
 8002330:	4013      	ands	r3, r2
 8002332:	2298      	movs	r2, #152	; 0x98
 8002334:	18bc      	adds	r4, r7, r2
 8002336:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8002338:	18bb      	adds	r3, r7, r2
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d114      	bne.n	800236a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002340:	187b      	adds	r3, r7, r1
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2220      	movs	r2, #32
 8002346:	4013      	ands	r3, r2
 8002348:	d00f      	beq.n	800236a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800234a:	183b      	adds	r3, r7, r0
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2220      	movs	r2, #32
 8002350:	4013      	ands	r3, r2
 8002352:	d00a      	beq.n	800236a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002358:	2b00      	cmp	r3, #0
 800235a:	d100      	bne.n	800235e <HAL_UART_IRQHandler+0x62>
 800235c:	e2a0      	b.n	80028a0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	0010      	movs	r0, r2
 8002366:	4798      	blx	r3
      }
      return;
 8002368:	e29a      	b.n	80028a0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800236a:	2398      	movs	r3, #152	; 0x98
 800236c:	18fb      	adds	r3, r7, r3
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d100      	bne.n	8002376 <HAL_UART_IRQHandler+0x7a>
 8002374:	e114      	b.n	80025a0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002376:	239c      	movs	r3, #156	; 0x9c
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2201      	movs	r2, #1
 800237e:	4013      	ands	r3, r2
 8002380:	d106      	bne.n	8002390 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002382:	23a0      	movs	r3, #160	; 0xa0
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a83      	ldr	r2, [pc, #524]	; (8002598 <HAL_UART_IRQHandler+0x29c>)
 800238a:	4013      	ands	r3, r2
 800238c:	d100      	bne.n	8002390 <HAL_UART_IRQHandler+0x94>
 800238e:	e107      	b.n	80025a0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002390:	23a4      	movs	r3, #164	; 0xa4
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2201      	movs	r2, #1
 8002398:	4013      	ands	r3, r2
 800239a:	d012      	beq.n	80023c2 <HAL_UART_IRQHandler+0xc6>
 800239c:	23a0      	movs	r3, #160	; 0xa0
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4013      	ands	r3, r2
 80023a8:	d00b      	beq.n	80023c2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2201      	movs	r2, #1
 80023b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2284      	movs	r2, #132	; 0x84
 80023b6:	589b      	ldr	r3, [r3, r2]
 80023b8:	2201      	movs	r2, #1
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2184      	movs	r1, #132	; 0x84
 80023c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023c2:	23a4      	movs	r3, #164	; 0xa4
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2202      	movs	r2, #2
 80023ca:	4013      	ands	r3, r2
 80023cc:	d011      	beq.n	80023f2 <HAL_UART_IRQHandler+0xf6>
 80023ce:	239c      	movs	r3, #156	; 0x9c
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	d00b      	beq.n	80023f2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2202      	movs	r2, #2
 80023e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2284      	movs	r2, #132	; 0x84
 80023e6:	589b      	ldr	r3, [r3, r2]
 80023e8:	2204      	movs	r2, #4
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2184      	movs	r1, #132	; 0x84
 80023f0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023f2:	23a4      	movs	r3, #164	; 0xa4
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2204      	movs	r2, #4
 80023fa:	4013      	ands	r3, r2
 80023fc:	d011      	beq.n	8002422 <HAL_UART_IRQHandler+0x126>
 80023fe:	239c      	movs	r3, #156	; 0x9c
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2201      	movs	r2, #1
 8002406:	4013      	ands	r3, r2
 8002408:	d00b      	beq.n	8002422 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2204      	movs	r2, #4
 8002410:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2284      	movs	r2, #132	; 0x84
 8002416:	589b      	ldr	r3, [r3, r2]
 8002418:	2202      	movs	r2, #2
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2184      	movs	r1, #132	; 0x84
 8002420:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002422:	23a4      	movs	r3, #164	; 0xa4
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2208      	movs	r2, #8
 800242a:	4013      	ands	r3, r2
 800242c:	d017      	beq.n	800245e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800242e:	23a0      	movs	r3, #160	; 0xa0
 8002430:	18fb      	adds	r3, r7, r3
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2220      	movs	r2, #32
 8002436:	4013      	ands	r3, r2
 8002438:	d105      	bne.n	8002446 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800243a:	239c      	movs	r3, #156	; 0x9c
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2201      	movs	r2, #1
 8002442:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002444:	d00b      	beq.n	800245e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2208      	movs	r2, #8
 800244c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2284      	movs	r2, #132	; 0x84
 8002452:	589b      	ldr	r3, [r3, r2]
 8002454:	2208      	movs	r2, #8
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2184      	movs	r1, #132	; 0x84
 800245c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800245e:	23a4      	movs	r3, #164	; 0xa4
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	4013      	ands	r3, r2
 800246a:	d013      	beq.n	8002494 <HAL_UART_IRQHandler+0x198>
 800246c:	23a0      	movs	r3, #160	; 0xa0
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	04db      	lsls	r3, r3, #19
 8002476:	4013      	ands	r3, r2
 8002478:	d00c      	beq.n	8002494 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	0112      	lsls	r2, r2, #4
 8002482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2284      	movs	r2, #132	; 0x84
 8002488:	589b      	ldr	r3, [r3, r2]
 800248a:	2220      	movs	r2, #32
 800248c:	431a      	orrs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2184      	movs	r1, #132	; 0x84
 8002492:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2284      	movs	r2, #132	; 0x84
 8002498:	589b      	ldr	r3, [r3, r2]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d100      	bne.n	80024a0 <HAL_UART_IRQHandler+0x1a4>
 800249e:	e201      	b.n	80028a4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80024a0:	23a4      	movs	r3, #164	; 0xa4
 80024a2:	18fb      	adds	r3, r7, r3
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2220      	movs	r2, #32
 80024a8:	4013      	ands	r3, r2
 80024aa:	d00e      	beq.n	80024ca <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80024ac:	23a0      	movs	r3, #160	; 0xa0
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2220      	movs	r2, #32
 80024b4:	4013      	ands	r3, r2
 80024b6:	d008      	beq.n	80024ca <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	0010      	movs	r0, r2
 80024c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2284      	movs	r2, #132	; 0x84
 80024ce:	589b      	ldr	r3, [r3, r2]
 80024d0:	2194      	movs	r1, #148	; 0x94
 80024d2:	187a      	adds	r2, r7, r1
 80024d4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2240      	movs	r2, #64	; 0x40
 80024de:	4013      	ands	r3, r2
 80024e0:	2b40      	cmp	r3, #64	; 0x40
 80024e2:	d004      	beq.n	80024ee <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2228      	movs	r2, #40	; 0x28
 80024ea:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024ec:	d047      	beq.n	800257e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	0018      	movs	r0, r3
 80024f2:	f000 ff0d 	bl	8003310 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2240      	movs	r2, #64	; 0x40
 80024fe:	4013      	ands	r3, r2
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d137      	bne.n	8002574 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002504:	f3ef 8310 	mrs	r3, PRIMASK
 8002508:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800250a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800250c:	2090      	movs	r0, #144	; 0x90
 800250e:	183a      	adds	r2, r7, r0
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	2301      	movs	r3, #1
 8002514:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002518:	f383 8810 	msr	PRIMASK, r3
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2140      	movs	r1, #64	; 0x40
 800252a:	438a      	bics	r2, r1
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	183b      	adds	r3, r7, r0
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002536:	f383 8810 	msr	PRIMASK, r3
}
 800253a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002540:	2b00      	cmp	r3, #0
 8002542:	d012      	beq.n	800256a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <HAL_UART_IRQHandler+0x2a0>)
 800254a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002550:	0018      	movs	r0, r3
 8002552:	f7fe fba5 	bl	8000ca0 <HAL_DMA_Abort_IT>
 8002556:	1e03      	subs	r3, r0, #0
 8002558:	d01a      	beq.n	8002590 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800255e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002564:	0018      	movs	r0, r3
 8002566:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002568:	e012      	b.n	8002590 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f000 f9a7 	bl	80028c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002572:	e00d      	b.n	8002590 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	0018      	movs	r0, r3
 8002578:	f000 f9a2 	bl	80028c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800257c:	e008      	b.n	8002590 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	0018      	movs	r0, r3
 8002582:	f000 f99d 	bl	80028c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2284      	movs	r2, #132	; 0x84
 800258a:	2100      	movs	r1, #0
 800258c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800258e:	e189      	b.n	80028a4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002590:	46c0      	nop			; (mov r8, r8)
    return;
 8002592:	e187      	b.n	80028a4 <HAL_UART_IRQHandler+0x5a8>
 8002594:	0000080f 	.word	0x0000080f
 8002598:	04000120 	.word	0x04000120
 800259c:	080033d9 	.word	0x080033d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d000      	beq.n	80025aa <HAL_UART_IRQHandler+0x2ae>
 80025a8:	e13b      	b.n	8002822 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80025aa:	23a4      	movs	r3, #164	; 0xa4
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2210      	movs	r2, #16
 80025b2:	4013      	ands	r3, r2
 80025b4:	d100      	bne.n	80025b8 <HAL_UART_IRQHandler+0x2bc>
 80025b6:	e134      	b.n	8002822 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80025b8:	23a0      	movs	r3, #160	; 0xa0
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2210      	movs	r2, #16
 80025c0:	4013      	ands	r3, r2
 80025c2:	d100      	bne.n	80025c6 <HAL_UART_IRQHandler+0x2ca>
 80025c4:	e12d      	b.n	8002822 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2210      	movs	r2, #16
 80025cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2240      	movs	r2, #64	; 0x40
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b40      	cmp	r3, #64	; 0x40
 80025da:	d000      	beq.n	80025de <HAL_UART_IRQHandler+0x2e2>
 80025dc:	e0a1      	b.n	8002722 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	217e      	movs	r1, #126	; 0x7e
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80025ec:	187b      	adds	r3, r7, r1
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d100      	bne.n	80025f6 <HAL_UART_IRQHandler+0x2fa>
 80025f4:	e158      	b.n	80028a8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2258      	movs	r2, #88	; 0x58
 80025fa:	5a9b      	ldrh	r3, [r3, r2]
 80025fc:	187a      	adds	r2, r7, r1
 80025fe:	8812      	ldrh	r2, [r2, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d300      	bcc.n	8002606 <HAL_UART_IRQHandler+0x30a>
 8002604:	e150      	b.n	80028a8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	187a      	adds	r2, r7, r1
 800260a:	215a      	movs	r1, #90	; 0x5a
 800260c:	8812      	ldrh	r2, [r2, #0]
 800260e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2220      	movs	r2, #32
 800261a:	4013      	ands	r3, r2
 800261c:	d16f      	bne.n	80026fe <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261e:	f3ef 8310 	mrs	r3, PRIMASK
 8002622:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002626:	67bb      	str	r3, [r7, #120]	; 0x78
 8002628:	2301      	movs	r3, #1
 800262a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800262c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262e:	f383 8810 	msr	PRIMASK, r3
}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	499e      	ldr	r1, [pc, #632]	; (80028b8 <HAL_UART_IRQHandler+0x5bc>)
 8002640:	400a      	ands	r2, r1
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264a:	f383 8810 	msr	PRIMASK, r3
}
 800264e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002650:	f3ef 8310 	mrs	r3, PRIMASK
 8002654:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002658:	677b      	str	r3, [r7, #116]	; 0x74
 800265a:	2301      	movs	r3, #1
 800265c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800265e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002660:	f383 8810 	msr	PRIMASK, r3
}
 8002664:	46c0      	nop			; (mov r8, r8)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	438a      	bics	r2, r1
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002678:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800267a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267c:	f383 8810 	msr	PRIMASK, r3
}
 8002680:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002682:	f3ef 8310 	mrs	r3, PRIMASK
 8002686:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002688:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800268a:	673b      	str	r3, [r7, #112]	; 0x70
 800268c:	2301      	movs	r3, #1
 800268e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002692:	f383 8810 	msr	PRIMASK, r3
}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689a      	ldr	r2, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2140      	movs	r1, #64	; 0x40
 80026a4:	438a      	bics	r2, r1
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026aa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ae:	f383 8810 	msr	PRIMASK, r3
}
 80026b2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2280      	movs	r2, #128	; 0x80
 80026b8:	2120      	movs	r1, #32
 80026ba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026c2:	f3ef 8310 	mrs	r3, PRIMASK
 80026c6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80026c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026cc:	2301      	movs	r3, #1
 80026ce:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026d2:	f383 8810 	msr	PRIMASK, r3
}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2110      	movs	r1, #16
 80026e4:	438a      	bics	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026ee:	f383 8810 	msr	PRIMASK, r3
}
 80026f2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7fe fa91 	bl	8000c20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2202      	movs	r2, #2
 8002702:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2258      	movs	r2, #88	; 0x58
 8002708:	5a9a      	ldrh	r2, [r3, r2]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	215a      	movs	r1, #90	; 0x5a
 800270e:	5a5b      	ldrh	r3, [r3, r1]
 8002710:	b29b      	uxth	r3, r3
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	b29a      	uxth	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0011      	movs	r1, r2
 800271a:	0018      	movs	r0, r3
 800271c:	f000 f8d8 	bl	80028d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002720:	e0c2      	b.n	80028a8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2258      	movs	r2, #88	; 0x58
 8002726:	5a99      	ldrh	r1, [r3, r2]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	225a      	movs	r2, #90	; 0x5a
 800272c:	5a9b      	ldrh	r3, [r3, r2]
 800272e:	b29a      	uxth	r2, r3
 8002730:	208e      	movs	r0, #142	; 0x8e
 8002732:	183b      	adds	r3, r7, r0
 8002734:	1a8a      	subs	r2, r1, r2
 8002736:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	225a      	movs	r2, #90	; 0x5a
 800273c:	5a9b      	ldrh	r3, [r3, r2]
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d100      	bne.n	8002746 <HAL_UART_IRQHandler+0x44a>
 8002744:	e0b2      	b.n	80028ac <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8002746:	183b      	adds	r3, r7, r0
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d100      	bne.n	8002750 <HAL_UART_IRQHandler+0x454>
 800274e:	e0ad      	b.n	80028ac <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002750:	f3ef 8310 	mrs	r3, PRIMASK
 8002754:	60fb      	str	r3, [r7, #12]
  return(result);
 8002756:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002758:	2488      	movs	r4, #136	; 0x88
 800275a:	193a      	adds	r2, r7, r4
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	2301      	movs	r3, #1
 8002760:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f383 8810 	msr	PRIMASK, r3
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4951      	ldr	r1, [pc, #324]	; (80028bc <HAL_UART_IRQHandler+0x5c0>)
 8002776:	400a      	ands	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	193b      	adds	r3, r7, r4
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f383 8810 	msr	PRIMASK, r3
}
 8002786:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002788:	f3ef 8310 	mrs	r3, PRIMASK
 800278c:	61bb      	str	r3, [r7, #24]
  return(result);
 800278e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002790:	2484      	movs	r4, #132	; 0x84
 8002792:	193a      	adds	r2, r7, r4
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	2301      	movs	r3, #1
 8002798:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f383 8810 	msr	PRIMASK, r3
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	438a      	bics	r2, r1
 80027b0:	609a      	str	r2, [r3, #8]
 80027b2:	193b      	adds	r3, r7, r4
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	f383 8810 	msr	PRIMASK, r3
}
 80027be:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	2120      	movs	r1, #32
 80027c6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d4:	f3ef 8310 	mrs	r3, PRIMASK
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027dc:	2480      	movs	r4, #128	; 0x80
 80027de:	193a      	adds	r2, r7, r4
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	2301      	movs	r3, #1
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	f383 8810 	msr	PRIMASK, r3
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2110      	movs	r1, #16
 80027fa:	438a      	bics	r2, r1
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	193b      	adds	r3, r7, r4
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002806:	f383 8810 	msr	PRIMASK, r3
}
 800280a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002812:	183b      	adds	r3, r7, r0
 8002814:	881a      	ldrh	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	0011      	movs	r1, r2
 800281a:	0018      	movs	r0, r3
 800281c:	f000 f858 	bl	80028d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002820:	e044      	b.n	80028ac <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002822:	23a4      	movs	r3, #164	; 0xa4
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	035b      	lsls	r3, r3, #13
 800282c:	4013      	ands	r3, r2
 800282e:	d010      	beq.n	8002852 <HAL_UART_IRQHandler+0x556>
 8002830:	239c      	movs	r3, #156	; 0x9c
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	2380      	movs	r3, #128	; 0x80
 8002838:	03db      	lsls	r3, r3, #15
 800283a:	4013      	ands	r3, r2
 800283c:	d009      	beq.n	8002852 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2280      	movs	r2, #128	; 0x80
 8002844:	0352      	lsls	r2, r2, #13
 8002846:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	0018      	movs	r0, r3
 800284c:	f001 f882 	bl	8003954 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002850:	e02f      	b.n	80028b2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002852:	23a4      	movs	r3, #164	; 0xa4
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2280      	movs	r2, #128	; 0x80
 800285a:	4013      	ands	r3, r2
 800285c:	d00f      	beq.n	800287e <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800285e:	23a0      	movs	r3, #160	; 0xa0
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2280      	movs	r2, #128	; 0x80
 8002866:	4013      	ands	r3, r2
 8002868:	d009      	beq.n	800287e <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800286e:	2b00      	cmp	r3, #0
 8002870:	d01e      	beq.n	80028b0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	0010      	movs	r0, r2
 800287a:	4798      	blx	r3
    }
    return;
 800287c:	e018      	b.n	80028b0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800287e:	23a4      	movs	r3, #164	; 0xa4
 8002880:	18fb      	adds	r3, r7, r3
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2240      	movs	r2, #64	; 0x40
 8002886:	4013      	ands	r3, r2
 8002888:	d013      	beq.n	80028b2 <HAL_UART_IRQHandler+0x5b6>
 800288a:	23a0      	movs	r3, #160	; 0xa0
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2240      	movs	r2, #64	; 0x40
 8002892:	4013      	ands	r3, r2
 8002894:	d00d      	beq.n	80028b2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0018      	movs	r0, r3
 800289a:	f000 fe6b 	bl	8003574 <UART_EndTransmit_IT>
    return;
 800289e:	e008      	b.n	80028b2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	e006      	b.n	80028b2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80028a4:	46c0      	nop			; (mov r8, r8)
 80028a6:	e004      	b.n	80028b2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	e002      	b.n	80028b2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80028ac:	46c0      	nop			; (mov r8, r8)
 80028ae:	e000      	b.n	80028b2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80028b0:	46c0      	nop			; (mov r8, r8)
  }

}
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b02b      	add	sp, #172	; 0xac
 80028b6:	bd90      	pop	{r4, r7, pc}
 80028b8:	fffffeff 	.word	0xfffffeff
 80028bc:	fffffedf 	.word	0xfffffedf

080028c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	000a      	movs	r2, r1
 80028da:	1cbb      	adds	r3, r7, #2
 80028dc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b002      	add	sp, #8
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b08e      	sub	sp, #56	; 0x38
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028f0:	231a      	movs	r3, #26
 80028f2:	2218      	movs	r2, #24
 80028f4:	189b      	adds	r3, r3, r2
 80028f6:	19db      	adds	r3, r3, r7
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	431a      	orrs	r2, r3
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	431a      	orrs	r2, r3
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	4313      	orrs	r3, r2
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4ac6      	ldr	r2, [pc, #792]	; (8002c34 <UART_SetConfig+0x34c>)
 800291c:	4013      	ands	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002926:	430a      	orrs	r2, r1
 8002928:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4ac1      	ldr	r2, [pc, #772]	; (8002c38 <UART_SetConfig+0x350>)
 8002932:	4013      	ands	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4abb      	ldr	r2, [pc, #748]	; (8002c3c <UART_SetConfig+0x354>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002958:	4313      	orrs	r3, r2
 800295a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	4ab7      	ldr	r2, [pc, #732]	; (8002c40 <UART_SetConfig+0x358>)
 8002964:	4013      	ands	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800296e:	430a      	orrs	r2, r1
 8002970:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4ab3      	ldr	r2, [pc, #716]	; (8002c44 <UART_SetConfig+0x35c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d131      	bne.n	80029e0 <UART_SetConfig+0xf8>
 800297c:	4bb2      	ldr	r3, [pc, #712]	; (8002c48 <UART_SetConfig+0x360>)
 800297e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002980:	2203      	movs	r2, #3
 8002982:	4013      	ands	r3, r2
 8002984:	2b03      	cmp	r3, #3
 8002986:	d01d      	beq.n	80029c4 <UART_SetConfig+0xdc>
 8002988:	d823      	bhi.n	80029d2 <UART_SetConfig+0xea>
 800298a:	2b02      	cmp	r3, #2
 800298c:	d00c      	beq.n	80029a8 <UART_SetConfig+0xc0>
 800298e:	d820      	bhi.n	80029d2 <UART_SetConfig+0xea>
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <UART_SetConfig+0xb2>
 8002994:	2b01      	cmp	r3, #1
 8002996:	d00e      	beq.n	80029b6 <UART_SetConfig+0xce>
 8002998:	e01b      	b.n	80029d2 <UART_SetConfig+0xea>
 800299a:	231b      	movs	r3, #27
 800299c:	2218      	movs	r2, #24
 800299e:	189b      	adds	r3, r3, r2
 80029a0:	19db      	adds	r3, r3, r7
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
 80029a6:	e09c      	b.n	8002ae2 <UART_SetConfig+0x1fa>
 80029a8:	231b      	movs	r3, #27
 80029aa:	2218      	movs	r2, #24
 80029ac:	189b      	adds	r3, r3, r2
 80029ae:	19db      	adds	r3, r3, r7
 80029b0:	2202      	movs	r2, #2
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	e095      	b.n	8002ae2 <UART_SetConfig+0x1fa>
 80029b6:	231b      	movs	r3, #27
 80029b8:	2218      	movs	r2, #24
 80029ba:	189b      	adds	r3, r3, r2
 80029bc:	19db      	adds	r3, r3, r7
 80029be:	2204      	movs	r2, #4
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e08e      	b.n	8002ae2 <UART_SetConfig+0x1fa>
 80029c4:	231b      	movs	r3, #27
 80029c6:	2218      	movs	r2, #24
 80029c8:	189b      	adds	r3, r3, r2
 80029ca:	19db      	adds	r3, r3, r7
 80029cc:	2208      	movs	r2, #8
 80029ce:	701a      	strb	r2, [r3, #0]
 80029d0:	e087      	b.n	8002ae2 <UART_SetConfig+0x1fa>
 80029d2:	231b      	movs	r3, #27
 80029d4:	2218      	movs	r2, #24
 80029d6:	189b      	adds	r3, r3, r2
 80029d8:	19db      	adds	r3, r3, r7
 80029da:	2210      	movs	r2, #16
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	e080      	b.n	8002ae2 <UART_SetConfig+0x1fa>
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a99      	ldr	r2, [pc, #612]	; (8002c4c <UART_SetConfig+0x364>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d131      	bne.n	8002a4e <UART_SetConfig+0x166>
 80029ea:	4b97      	ldr	r3, [pc, #604]	; (8002c48 <UART_SetConfig+0x360>)
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	220c      	movs	r2, #12
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b0c      	cmp	r3, #12
 80029f4:	d01d      	beq.n	8002a32 <UART_SetConfig+0x14a>
 80029f6:	d823      	bhi.n	8002a40 <UART_SetConfig+0x158>
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d00c      	beq.n	8002a16 <UART_SetConfig+0x12e>
 80029fc:	d820      	bhi.n	8002a40 <UART_SetConfig+0x158>
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <UART_SetConfig+0x120>
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d00e      	beq.n	8002a24 <UART_SetConfig+0x13c>
 8002a06:	e01b      	b.n	8002a40 <UART_SetConfig+0x158>
 8002a08:	231b      	movs	r3, #27
 8002a0a:	2218      	movs	r2, #24
 8002a0c:	189b      	adds	r3, r3, r2
 8002a0e:	19db      	adds	r3, r3, r7
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e065      	b.n	8002ae2 <UART_SetConfig+0x1fa>
 8002a16:	231b      	movs	r3, #27
 8002a18:	2218      	movs	r2, #24
 8002a1a:	189b      	adds	r3, r3, r2
 8002a1c:	19db      	adds	r3, r3, r7
 8002a1e:	2202      	movs	r2, #2
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	e05e      	b.n	8002ae2 <UART_SetConfig+0x1fa>
 8002a24:	231b      	movs	r3, #27
 8002a26:	2218      	movs	r2, #24
 8002a28:	189b      	adds	r3, r3, r2
 8002a2a:	19db      	adds	r3, r3, r7
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	e057      	b.n	8002ae2 <UART_SetConfig+0x1fa>
 8002a32:	231b      	movs	r3, #27
 8002a34:	2218      	movs	r2, #24
 8002a36:	189b      	adds	r3, r3, r2
 8002a38:	19db      	adds	r3, r3, r7
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	e050      	b.n	8002ae2 <UART_SetConfig+0x1fa>
 8002a40:	231b      	movs	r3, #27
 8002a42:	2218      	movs	r2, #24
 8002a44:	189b      	adds	r3, r3, r2
 8002a46:	19db      	adds	r3, r3, r7
 8002a48:	2210      	movs	r2, #16
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	e049      	b.n	8002ae2 <UART_SetConfig+0x1fa>
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a7a      	ldr	r2, [pc, #488]	; (8002c3c <UART_SetConfig+0x354>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d13e      	bne.n	8002ad6 <UART_SetConfig+0x1ee>
 8002a58:	4b7b      	ldr	r3, [pc, #492]	; (8002c48 <UART_SetConfig+0x360>)
 8002a5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a5c:	23c0      	movs	r3, #192	; 0xc0
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	4013      	ands	r3, r2
 8002a62:	22c0      	movs	r2, #192	; 0xc0
 8002a64:	0112      	lsls	r2, r2, #4
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d027      	beq.n	8002aba <UART_SetConfig+0x1d2>
 8002a6a:	22c0      	movs	r2, #192	; 0xc0
 8002a6c:	0112      	lsls	r2, r2, #4
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d82a      	bhi.n	8002ac8 <UART_SetConfig+0x1e0>
 8002a72:	2280      	movs	r2, #128	; 0x80
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d011      	beq.n	8002a9e <UART_SetConfig+0x1b6>
 8002a7a:	2280      	movs	r2, #128	; 0x80
 8002a7c:	0112      	lsls	r2, r2, #4
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d822      	bhi.n	8002ac8 <UART_SetConfig+0x1e0>
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d004      	beq.n	8002a90 <UART_SetConfig+0x1a8>
 8002a86:	2280      	movs	r2, #128	; 0x80
 8002a88:	00d2      	lsls	r2, r2, #3
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00e      	beq.n	8002aac <UART_SetConfig+0x1c4>
 8002a8e:	e01b      	b.n	8002ac8 <UART_SetConfig+0x1e0>
 8002a90:	231b      	movs	r3, #27
 8002a92:	2218      	movs	r2, #24
 8002a94:	189b      	adds	r3, r3, r2
 8002a96:	19db      	adds	r3, r3, r7
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e021      	b.n	8002ae2 <UART_SetConfig+0x1fa>
 8002a9e:	231b      	movs	r3, #27
 8002aa0:	2218      	movs	r2, #24
 8002aa2:	189b      	adds	r3, r3, r2
 8002aa4:	19db      	adds	r3, r3, r7
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	e01a      	b.n	8002ae2 <UART_SetConfig+0x1fa>
 8002aac:	231b      	movs	r3, #27
 8002aae:	2218      	movs	r2, #24
 8002ab0:	189b      	adds	r3, r3, r2
 8002ab2:	19db      	adds	r3, r3, r7
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	701a      	strb	r2, [r3, #0]
 8002ab8:	e013      	b.n	8002ae2 <UART_SetConfig+0x1fa>
 8002aba:	231b      	movs	r3, #27
 8002abc:	2218      	movs	r2, #24
 8002abe:	189b      	adds	r3, r3, r2
 8002ac0:	19db      	adds	r3, r3, r7
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e00c      	b.n	8002ae2 <UART_SetConfig+0x1fa>
 8002ac8:	231b      	movs	r3, #27
 8002aca:	2218      	movs	r2, #24
 8002acc:	189b      	adds	r3, r3, r2
 8002ace:	19db      	adds	r3, r3, r7
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	e005      	b.n	8002ae2 <UART_SetConfig+0x1fa>
 8002ad6:	231b      	movs	r3, #27
 8002ad8:	2218      	movs	r2, #24
 8002ada:	189b      	adds	r3, r3, r2
 8002adc:	19db      	adds	r3, r3, r7
 8002ade:	2210      	movs	r2, #16
 8002ae0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a55      	ldr	r2, [pc, #340]	; (8002c3c <UART_SetConfig+0x354>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d000      	beq.n	8002aee <UART_SetConfig+0x206>
 8002aec:	e084      	b.n	8002bf8 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002aee:	231b      	movs	r3, #27
 8002af0:	2218      	movs	r2, #24
 8002af2:	189b      	adds	r3, r3, r2
 8002af4:	19db      	adds	r3, r3, r7
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d01d      	beq.n	8002b38 <UART_SetConfig+0x250>
 8002afc:	dc20      	bgt.n	8002b40 <UART_SetConfig+0x258>
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d015      	beq.n	8002b2e <UART_SetConfig+0x246>
 8002b02:	dc1d      	bgt.n	8002b40 <UART_SetConfig+0x258>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <UART_SetConfig+0x226>
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d005      	beq.n	8002b18 <UART_SetConfig+0x230>
 8002b0c:	e018      	b.n	8002b40 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b0e:	f7ff f879 	bl	8001c04 <HAL_RCC_GetPCLK1Freq>
 8002b12:	0003      	movs	r3, r0
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b16:	e01c      	b.n	8002b52 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b18:	4b4b      	ldr	r3, [pc, #300]	; (8002c48 <UART_SetConfig+0x360>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d002      	beq.n	8002b28 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b22:	4b4b      	ldr	r3, [pc, #300]	; (8002c50 <UART_SetConfig+0x368>)
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b26:	e014      	b.n	8002b52 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002b28:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <UART_SetConfig+0x36c>)
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b2c:	e011      	b.n	8002b52 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b2e:	f7fe ffb9 	bl	8001aa4 <HAL_RCC_GetSysClockFreq>
 8002b32:	0003      	movs	r3, r0
 8002b34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b36:	e00c      	b.n	8002b52 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b3e:	e008      	b.n	8002b52 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b44:	231a      	movs	r3, #26
 8002b46:	2218      	movs	r2, #24
 8002b48:	189b      	adds	r3, r3, r2
 8002b4a:	19db      	adds	r3, r3, r7
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]
        break;
 8002b50:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d100      	bne.n	8002b5a <UART_SetConfig+0x272>
 8002b58:	e132      	b.n	8002dc0 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	0013      	movs	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	189b      	adds	r3, r3, r2
 8002b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d305      	bcc.n	8002b76 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d906      	bls.n	8002b84 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002b76:	231a      	movs	r3, #26
 8002b78:	2218      	movs	r2, #24
 8002b7a:	189b      	adds	r3, r3, r2
 8002b7c:	19db      	adds	r3, r3, r7
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e11d      	b.n	8002dc0 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	6939      	ldr	r1, [r7, #16]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	000b      	movs	r3, r1
 8002b92:	0e1b      	lsrs	r3, r3, #24
 8002b94:	0010      	movs	r0, r2
 8002b96:	0205      	lsls	r5, r0, #8
 8002b98:	431d      	orrs	r5, r3
 8002b9a:	000b      	movs	r3, r1
 8002b9c:	021c      	lsls	r4, r3, #8
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	085b      	lsrs	r3, r3, #1
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68b8      	ldr	r0, [r7, #8]
 8002bac:	68f9      	ldr	r1, [r7, #12]
 8002bae:	1900      	adds	r0, r0, r4
 8002bb0:	4169      	adcs	r1, r5
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f7fd fb36 	bl	8000230 <__aeabi_uldivmod>
 8002bc4:	0002      	movs	r2, r0
 8002bc6:	000b      	movs	r3, r1
 8002bc8:	0013      	movs	r3, r2
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bce:	23c0      	movs	r3, #192	; 0xc0
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d309      	bcc.n	8002bea <UART_SetConfig+0x302>
 8002bd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	035b      	lsls	r3, r3, #13
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d204      	bcs.n	8002bea <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002be6:	60da      	str	r2, [r3, #12]
 8002be8:	e0ea      	b.n	8002dc0 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002bea:	231a      	movs	r3, #26
 8002bec:	2218      	movs	r2, #24
 8002bee:	189b      	adds	r3, r3, r2
 8002bf0:	19db      	adds	r3, r3, r7
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e0e3      	b.n	8002dc0 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d000      	beq.n	8002c06 <UART_SetConfig+0x31e>
 8002c04:	e085      	b.n	8002d12 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002c06:	231b      	movs	r3, #27
 8002c08:	2218      	movs	r2, #24
 8002c0a:	189b      	adds	r3, r3, r2
 8002c0c:	19db      	adds	r3, r3, r7
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d837      	bhi.n	8002c84 <UART_SetConfig+0x39c>
 8002c14:	009a      	lsls	r2, r3, #2
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <UART_SetConfig+0x370>)
 8002c18:	18d3      	adds	r3, r2, r3
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c1e:	f7fe fff1 	bl	8001c04 <HAL_RCC_GetPCLK1Freq>
 8002c22:	0003      	movs	r3, r0
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c26:	e036      	b.n	8002c96 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c28:	f7ff f802 	bl	8001c30 <HAL_RCC_GetPCLK2Freq>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c30:	e031      	b.n	8002c96 <UART_SetConfig+0x3ae>
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	efff69f3 	.word	0xefff69f3
 8002c38:	ffffcfff 	.word	0xffffcfff
 8002c3c:	40004800 	.word	0x40004800
 8002c40:	fffff4ff 	.word	0xfffff4ff
 8002c44:	40013800 	.word	0x40013800
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	40004400 	.word	0x40004400
 8002c50:	003d0900 	.word	0x003d0900
 8002c54:	00f42400 	.word	0x00f42400
 8002c58:	08003a18 	.word	0x08003a18
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c5c:	4b60      	ldr	r3, [pc, #384]	; (8002de0 <UART_SetConfig+0x4f8>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2210      	movs	r2, #16
 8002c62:	4013      	ands	r3, r2
 8002c64:	d002      	beq.n	8002c6c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c66:	4b5f      	ldr	r3, [pc, #380]	; (8002de4 <UART_SetConfig+0x4fc>)
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c6a:	e014      	b.n	8002c96 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002c6c:	4b5e      	ldr	r3, [pc, #376]	; (8002de8 <UART_SetConfig+0x500>)
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c70:	e011      	b.n	8002c96 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c72:	f7fe ff17 	bl	8001aa4 <HAL_RCC_GetSysClockFreq>
 8002c76:	0003      	movs	r3, r0
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c7a:	e00c      	b.n	8002c96 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c82:	e008      	b.n	8002c96 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c88:	231a      	movs	r3, #26
 8002c8a:	2218      	movs	r2, #24
 8002c8c:	189b      	adds	r3, r3, r2
 8002c8e:	19db      	adds	r3, r3, r7
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
        break;
 8002c94:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d100      	bne.n	8002c9e <UART_SetConfig+0x3b6>
 8002c9c:	e090      	b.n	8002dc0 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	005a      	lsls	r2, r3, #1
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	085b      	lsrs	r3, r3, #1
 8002ca8:	18d2      	adds	r2, r2, r3
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	0019      	movs	r1, r3
 8002cb0:	0010      	movs	r0, r2
 8002cb2:	f7fd fa31 	bl	8000118 <__udivsi3>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbc:	2b0f      	cmp	r3, #15
 8002cbe:	d921      	bls.n	8002d04 <UART_SetConfig+0x41c>
 8002cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	025b      	lsls	r3, r3, #9
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d21c      	bcs.n	8002d04 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	200e      	movs	r0, #14
 8002cd0:	2418      	movs	r4, #24
 8002cd2:	1903      	adds	r3, r0, r4
 8002cd4:	19db      	adds	r3, r3, r7
 8002cd6:	210f      	movs	r1, #15
 8002cd8:	438a      	bics	r2, r1
 8002cda:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	085b      	lsrs	r3, r3, #1
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2207      	movs	r2, #7
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	b299      	uxth	r1, r3
 8002ce8:	1903      	adds	r3, r0, r4
 8002cea:	19db      	adds	r3, r3, r7
 8002cec:	1902      	adds	r2, r0, r4
 8002cee:	19d2      	adds	r2, r2, r7
 8002cf0:	8812      	ldrh	r2, [r2, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	1902      	adds	r2, r0, r4
 8002cfc:	19d2      	adds	r2, r2, r7
 8002cfe:	8812      	ldrh	r2, [r2, #0]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	e05d      	b.n	8002dc0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002d04:	231a      	movs	r3, #26
 8002d06:	2218      	movs	r2, #24
 8002d08:	189b      	adds	r3, r3, r2
 8002d0a:	19db      	adds	r3, r3, r7
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	e056      	b.n	8002dc0 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d12:	231b      	movs	r3, #27
 8002d14:	2218      	movs	r2, #24
 8002d16:	189b      	adds	r3, r3, r2
 8002d18:	19db      	adds	r3, r3, r7
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d822      	bhi.n	8002d66 <UART_SetConfig+0x47e>
 8002d20:	009a      	lsls	r2, r3, #2
 8002d22:	4b32      	ldr	r3, [pc, #200]	; (8002dec <UART_SetConfig+0x504>)
 8002d24:	18d3      	adds	r3, r2, r3
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d2a:	f7fe ff6b 	bl	8001c04 <HAL_RCC_GetPCLK1Freq>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d32:	e021      	b.n	8002d78 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d34:	f7fe ff7c 	bl	8001c30 <HAL_RCC_GetPCLK2Freq>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d3c:	e01c      	b.n	8002d78 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d3e:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <UART_SetConfig+0x4f8>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2210      	movs	r2, #16
 8002d44:	4013      	ands	r3, r2
 8002d46:	d002      	beq.n	8002d4e <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d48:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <UART_SetConfig+0x4fc>)
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d4c:	e014      	b.n	8002d78 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002d4e:	4b26      	ldr	r3, [pc, #152]	; (8002de8 <UART_SetConfig+0x500>)
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d52:	e011      	b.n	8002d78 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d54:	f7fe fea6 	bl	8001aa4 <HAL_RCC_GetSysClockFreq>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d5c:	e00c      	b.n	8002d78 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d64:	e008      	b.n	8002d78 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d6a:	231a      	movs	r3, #26
 8002d6c:	2218      	movs	r2, #24
 8002d6e:	189b      	adds	r3, r3, r2
 8002d70:	19db      	adds	r3, r3, r7
 8002d72:	2201      	movs	r2, #1
 8002d74:	701a      	strb	r2, [r3, #0]
        break;
 8002d76:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d020      	beq.n	8002dc0 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	085a      	lsrs	r2, r3, #1
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	18d2      	adds	r2, r2, r3
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	0010      	movs	r0, r2
 8002d90:	f7fd f9c2 	bl	8000118 <__udivsi3>
 8002d94:	0003      	movs	r3, r0
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	2b0f      	cmp	r3, #15
 8002d9c:	d90a      	bls.n	8002db4 <UART_SetConfig+0x4cc>
 8002d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	025b      	lsls	r3, r3, #9
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d205      	bcs.n	8002db4 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	e005      	b.n	8002dc0 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002db4:	231a      	movs	r3, #26
 8002db6:	2218      	movs	r2, #24
 8002db8:	189b      	adds	r3, r3, r2
 8002dba:	19db      	adds	r3, r3, r7
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002dcc:	231a      	movs	r3, #26
 8002dce:	2218      	movs	r2, #24
 8002dd0:	189b      	adds	r3, r3, r2
 8002dd2:	19db      	adds	r3, r3, r7
 8002dd4:	781b      	ldrb	r3, [r3, #0]
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b00e      	add	sp, #56	; 0x38
 8002ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	40021000 	.word	0x40021000
 8002de4:	003d0900 	.word	0x003d0900
 8002de8:	00f42400 	.word	0x00f42400
 8002dec:	08003a3c 	.word	0x08003a3c

08002df0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d00b      	beq.n	8002e1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a4a      	ldr	r2, [pc, #296]	; (8002f34 <UART_AdvFeatureConfig+0x144>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	2202      	movs	r2, #2
 8002e20:	4013      	ands	r3, r2
 8002e22:	d00b      	beq.n	8002e3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4a43      	ldr	r2, [pc, #268]	; (8002f38 <UART_AdvFeatureConfig+0x148>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	0019      	movs	r1, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	2204      	movs	r2, #4
 8002e42:	4013      	ands	r3, r2
 8002e44:	d00b      	beq.n	8002e5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	4a3b      	ldr	r2, [pc, #236]	; (8002f3c <UART_AdvFeatureConfig+0x14c>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	0019      	movs	r1, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	2208      	movs	r2, #8
 8002e64:	4013      	ands	r3, r2
 8002e66:	d00b      	beq.n	8002e80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a34      	ldr	r2, [pc, #208]	; (8002f40 <UART_AdvFeatureConfig+0x150>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	0019      	movs	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2210      	movs	r2, #16
 8002e86:	4013      	ands	r3, r2
 8002e88:	d00b      	beq.n	8002ea2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4a2c      	ldr	r2, [pc, #176]	; (8002f44 <UART_AdvFeatureConfig+0x154>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d00b      	beq.n	8002ec4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4a25      	ldr	r2, [pc, #148]	; (8002f48 <UART_AdvFeatureConfig+0x158>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	2240      	movs	r2, #64	; 0x40
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d01d      	beq.n	8002f0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4a1d      	ldr	r2, [pc, #116]	; (8002f4c <UART_AdvFeatureConfig+0x15c>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	0019      	movs	r1, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	035b      	lsls	r3, r3, #13
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d10b      	bne.n	8002f0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4a15      	ldr	r2, [pc, #84]	; (8002f50 <UART_AdvFeatureConfig+0x160>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0e:	2280      	movs	r2, #128	; 0x80
 8002f10:	4013      	ands	r3, r2
 8002f12:	d00b      	beq.n	8002f2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	4a0e      	ldr	r2, [pc, #56]	; (8002f54 <UART_AdvFeatureConfig+0x164>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	0019      	movs	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	605a      	str	r2, [r3, #4]
  }
}
 8002f2c:	46c0      	nop			; (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b002      	add	sp, #8
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	fffdffff 	.word	0xfffdffff
 8002f38:	fffeffff 	.word	0xfffeffff
 8002f3c:	fffbffff 	.word	0xfffbffff
 8002f40:	ffff7fff 	.word	0xffff7fff
 8002f44:	ffffefff 	.word	0xffffefff
 8002f48:	ffffdfff 	.word	0xffffdfff
 8002f4c:	ffefffff 	.word	0xffefffff
 8002f50:	ff9fffff 	.word	0xff9fffff
 8002f54:	fff7ffff 	.word	0xfff7ffff

08002f58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b092      	sub	sp, #72	; 0x48
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2284      	movs	r2, #132	; 0x84
 8002f64:	2100      	movs	r1, #0
 8002f66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f68:	f7fd fd4e 	bl	8000a08 <HAL_GetTick>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2208      	movs	r2, #8
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d12c      	bne.n	8002fd8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f80:	2280      	movs	r2, #128	; 0x80
 8002f82:	0391      	lsls	r1, r2, #14
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4a46      	ldr	r2, [pc, #280]	; (80030a0 <UART_CheckIdleState+0x148>)
 8002f88:	9200      	str	r2, [sp, #0]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f000 f88c 	bl	80030a8 <UART_WaitOnFlagUntilTimeout>
 8002f90:	1e03      	subs	r3, r0, #0
 8002f92:	d021      	beq.n	8002fd8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f94:	f3ef 8310 	mrs	r3, PRIMASK
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	f383 8810 	msr	PRIMASK, r3
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2180      	movs	r1, #128	; 0x80
 8002fb6:	438a      	bics	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	f383 8810 	msr	PRIMASK, r3
}
 8002fc4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2278      	movs	r2, #120	; 0x78
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e05f      	b.n	8003098 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2204      	movs	r2, #4
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d146      	bne.n	8003074 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	03d1      	lsls	r1, r2, #15
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4a2c      	ldr	r2, [pc, #176]	; (80030a0 <UART_CheckIdleState+0x148>)
 8002ff0:	9200      	str	r2, [sp, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f000 f858 	bl	80030a8 <UART_WaitOnFlagUntilTimeout>
 8002ff8:	1e03      	subs	r3, r0, #0
 8002ffa:	d03b      	beq.n	8003074 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8003000:	60fb      	str	r3, [r7, #12]
  return(result);
 8003002:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
 8003006:	2301      	movs	r3, #1
 8003008:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f383 8810 	msr	PRIMASK, r3
}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4921      	ldr	r1, [pc, #132]	; (80030a4 <UART_CheckIdleState+0x14c>)
 800301e:	400a      	ands	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003024:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f383 8810 	msr	PRIMASK, r3
}
 800302c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800302e:	f3ef 8310 	mrs	r3, PRIMASK
 8003032:	61bb      	str	r3, [r7, #24]
  return(result);
 8003034:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003036:	633b      	str	r3, [r7, #48]	; 0x30
 8003038:	2301      	movs	r3, #1
 800303a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f383 8810 	msr	PRIMASK, r3
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2101      	movs	r1, #1
 8003050:	438a      	bics	r2, r1
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	f383 8810 	msr	PRIMASK, r3
}
 800305e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2280      	movs	r2, #128	; 0x80
 8003064:	2120      	movs	r1, #32
 8003066:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2278      	movs	r2, #120	; 0x78
 800306c:	2100      	movs	r1, #0
 800306e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e011      	b.n	8003098 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2280      	movs	r2, #128	; 0x80
 800307e:	2120      	movs	r1, #32
 8003080:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2278      	movs	r2, #120	; 0x78
 8003092:	2100      	movs	r1, #0
 8003094:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	0018      	movs	r0, r3
 800309a:	46bd      	mov	sp, r7
 800309c:	b010      	add	sp, #64	; 0x40
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	01ffffff 	.word	0x01ffffff
 80030a4:	fffffedf 	.word	0xfffffedf

080030a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	1dfb      	adds	r3, r7, #7
 80030b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b8:	e04b      	b.n	8003152 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	3301      	adds	r3, #1
 80030be:	d048      	beq.n	8003152 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c0:	f7fd fca2 	bl	8000a08 <HAL_GetTick>
 80030c4:	0002      	movs	r2, r0
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d302      	bcc.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e04b      	b.n	8003172 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2204      	movs	r2, #4
 80030e2:	4013      	ands	r3, r2
 80030e4:	d035      	beq.n	8003152 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	2208      	movs	r2, #8
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d111      	bne.n	8003118 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2208      	movs	r2, #8
 80030fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	0018      	movs	r0, r3
 8003100:	f000 f906 	bl	8003310 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2284      	movs	r2, #132	; 0x84
 8003108:	2108      	movs	r1, #8
 800310a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2278      	movs	r2, #120	; 0x78
 8003110:	2100      	movs	r1, #0
 8003112:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e02c      	b.n	8003172 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69da      	ldr	r2, [r3, #28]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	401a      	ands	r2, r3
 8003124:	2380      	movs	r3, #128	; 0x80
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	429a      	cmp	r2, r3
 800312a:	d112      	bne.n	8003152 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2280      	movs	r2, #128	; 0x80
 8003132:	0112      	lsls	r2, r2, #4
 8003134:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	0018      	movs	r0, r3
 800313a:	f000 f8e9 	bl	8003310 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2284      	movs	r2, #132	; 0x84
 8003142:	2120      	movs	r1, #32
 8003144:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2278      	movs	r2, #120	; 0x78
 800314a:	2100      	movs	r1, #0
 800314c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e00f      	b.n	8003172 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	68ba      	ldr	r2, [r7, #8]
 800315a:	4013      	ands	r3, r2
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	425a      	negs	r2, r3
 8003162:	4153      	adcs	r3, r2
 8003164:	b2db      	uxtb	r3, r3
 8003166:	001a      	movs	r2, r3
 8003168:	1dfb      	adds	r3, r7, #7
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d0a4      	beq.n	80030ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	0018      	movs	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	b004      	add	sp, #16
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b090      	sub	sp, #64	; 0x40
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	1dbb      	adds	r3, r7, #6
 8003188:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	1dba      	adds	r2, r7, #6
 8003194:	2158      	movs	r1, #88	; 0x58
 8003196:	8812      	ldrh	r2, [r2, #0]
 8003198:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1dba      	adds	r2, r7, #6
 800319e:	215a      	movs	r1, #90	; 0x5a
 80031a0:	8812      	ldrh	r2, [r2, #0]
 80031a2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	2380      	movs	r3, #128	; 0x80
 80031b0:	015b      	lsls	r3, r3, #5
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d10d      	bne.n	80031d2 <UART_Start_Receive_IT+0x56>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d104      	bne.n	80031c8 <UART_Start_Receive_IT+0x4c>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	225c      	movs	r2, #92	; 0x5c
 80031c2:	4950      	ldr	r1, [pc, #320]	; (8003304 <UART_Start_Receive_IT+0x188>)
 80031c4:	5299      	strh	r1, [r3, r2]
 80031c6:	e02e      	b.n	8003226 <UART_Start_Receive_IT+0xaa>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	225c      	movs	r2, #92	; 0x5c
 80031cc:	21ff      	movs	r1, #255	; 0xff
 80031ce:	5299      	strh	r1, [r3, r2]
 80031d0:	e029      	b.n	8003226 <UART_Start_Receive_IT+0xaa>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10d      	bne.n	80031f6 <UART_Start_Receive_IT+0x7a>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d104      	bne.n	80031ec <UART_Start_Receive_IT+0x70>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	225c      	movs	r2, #92	; 0x5c
 80031e6:	21ff      	movs	r1, #255	; 0xff
 80031e8:	5299      	strh	r1, [r3, r2]
 80031ea:	e01c      	b.n	8003226 <UART_Start_Receive_IT+0xaa>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	225c      	movs	r2, #92	; 0x5c
 80031f0:	217f      	movs	r1, #127	; 0x7f
 80031f2:	5299      	strh	r1, [r3, r2]
 80031f4:	e017      	b.n	8003226 <UART_Start_Receive_IT+0xaa>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	055b      	lsls	r3, r3, #21
 80031fe:	429a      	cmp	r2, r3
 8003200:	d10d      	bne.n	800321e <UART_Start_Receive_IT+0xa2>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d104      	bne.n	8003214 <UART_Start_Receive_IT+0x98>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	225c      	movs	r2, #92	; 0x5c
 800320e:	217f      	movs	r1, #127	; 0x7f
 8003210:	5299      	strh	r1, [r3, r2]
 8003212:	e008      	b.n	8003226 <UART_Start_Receive_IT+0xaa>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	225c      	movs	r2, #92	; 0x5c
 8003218:	213f      	movs	r1, #63	; 0x3f
 800321a:	5299      	strh	r1, [r3, r2]
 800321c:	e003      	b.n	8003226 <UART_Start_Receive_IT+0xaa>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	225c      	movs	r2, #92	; 0x5c
 8003222:	2100      	movs	r1, #0
 8003224:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2284      	movs	r2, #132	; 0x84
 800322a:	2100      	movs	r1, #0
 800322c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2280      	movs	r2, #128	; 0x80
 8003232:	2122      	movs	r1, #34	; 0x22
 8003234:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003236:	f3ef 8310 	mrs	r3, PRIMASK
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003240:	2301      	movs	r3, #1
 8003242:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003246:	f383 8810 	msr	PRIMASK, r3
}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2101      	movs	r1, #1
 8003258:	430a      	orrs	r2, r1
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	f383 8810 	msr	PRIMASK, r3
}
 8003266:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	015b      	lsls	r3, r3, #5
 8003270:	429a      	cmp	r2, r3
 8003272:	d107      	bne.n	8003284 <UART_Start_Receive_IT+0x108>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d103      	bne.n	8003284 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4a22      	ldr	r2, [pc, #136]	; (8003308 <UART_Start_Receive_IT+0x18c>)
 8003280:	669a      	str	r2, [r3, #104]	; 0x68
 8003282:	e002      	b.n	800328a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4a21      	ldr	r2, [pc, #132]	; (800330c <UART_Start_Receive_IT+0x190>)
 8003288:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d019      	beq.n	80032c6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003292:	f3ef 8310 	mrs	r3, PRIMASK
 8003296:	61fb      	str	r3, [r7, #28]
  return(result);
 8003298:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800329a:	637b      	str	r3, [r7, #52]	; 0x34
 800329c:	2301      	movs	r3, #1
 800329e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	f383 8810 	msr	PRIMASK, r3
}
 80032a6:	46c0      	nop			; (mov r8, r8)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2190      	movs	r1, #144	; 0x90
 80032b4:	0049      	lsls	r1, r1, #1
 80032b6:	430a      	orrs	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	f383 8810 	msr	PRIMASK, r3
}
 80032c4:	e018      	b.n	80032f8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c6:	f3ef 8310 	mrs	r3, PRIMASK
 80032ca:	613b      	str	r3, [r7, #16]
  return(result);
 80032cc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80032ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80032d0:	2301      	movs	r3, #1
 80032d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f383 8810 	msr	PRIMASK, r3
}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2120      	movs	r1, #32
 80032e8:	430a      	orrs	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	f383 8810 	msr	PRIMASK, r3
}
 80032f6:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	0018      	movs	r0, r3
 80032fc:	46bd      	mov	sp, r7
 80032fe:	b010      	add	sp, #64	; 0x40
 8003300:	bd80      	pop	{r7, pc}
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	000001ff 	.word	0x000001ff
 8003308:	08003791 	.word	0x08003791
 800330c:	080035cd 	.word	0x080035cd

08003310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08e      	sub	sp, #56	; 0x38
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003318:	f3ef 8310 	mrs	r3, PRIMASK
 800331c:	617b      	str	r3, [r7, #20]
  return(result);
 800331e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
 8003322:	2301      	movs	r3, #1
 8003324:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f383 8810 	msr	PRIMASK, r3
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4926      	ldr	r1, [pc, #152]	; (80033d4 <UART_EndRxTransfer+0xc4>)
 800333a:	400a      	ands	r2, r1
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003340:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f383 8810 	msr	PRIMASK, r3
}
 8003348:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800334a:	f3ef 8310 	mrs	r3, PRIMASK
 800334e:	623b      	str	r3, [r7, #32]
  return(result);
 8003350:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003352:	633b      	str	r3, [r7, #48]	; 0x30
 8003354:	2301      	movs	r3, #1
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335a:	f383 8810 	msr	PRIMASK, r3
}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2101      	movs	r1, #1
 800336c:	438a      	bics	r2, r1
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003376:	f383 8810 	msr	PRIMASK, r3
}
 800337a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003380:	2b01      	cmp	r3, #1
 8003382:	d118      	bne.n	80033b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003384:	f3ef 8310 	mrs	r3, PRIMASK
 8003388:	60bb      	str	r3, [r7, #8]
  return(result);
 800338a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800338e:	2301      	movs	r3, #1
 8003390:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f383 8810 	msr	PRIMASK, r3
}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2110      	movs	r1, #16
 80033a6:	438a      	bics	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f383 8810 	msr	PRIMASK, r3
}
 80033b4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2280      	movs	r2, #128	; 0x80
 80033ba:	2120      	movs	r1, #32
 80033bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b00e      	add	sp, #56	; 0x38
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	fffffedf 	.word	0xfffffedf

080033d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	225a      	movs	r2, #90	; 0x5a
 80033ea:	2100      	movs	r1, #0
 80033ec:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2252      	movs	r2, #82	; 0x52
 80033f2:	2100      	movs	r1, #0
 80033f4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7ff fa61 	bl	80028c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46bd      	mov	sp, r7
 8003402:	b004      	add	sp, #16
 8003404:	bd80      	pop	{r7, pc}

08003406 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b08a      	sub	sp, #40	; 0x28
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003412:	2b21      	cmp	r3, #33	; 0x21
 8003414:	d14c      	bne.n	80034b0 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2252      	movs	r2, #82	; 0x52
 800341a:	5a9b      	ldrh	r3, [r3, r2]
 800341c:	b29b      	uxth	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d132      	bne.n	8003488 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003422:	f3ef 8310 	mrs	r3, PRIMASK
 8003426:	60bb      	str	r3, [r7, #8]
  return(result);
 8003428:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
 800342c:	2301      	movs	r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2180      	movs	r1, #128	; 0x80
 8003444:	438a      	bics	r2, r1
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f383 8810 	msr	PRIMASK, r3
}
 8003452:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003454:	f3ef 8310 	mrs	r3, PRIMASK
 8003458:	617b      	str	r3, [r7, #20]
  return(result);
 800345a:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800345c:	623b      	str	r3, [r7, #32]
 800345e:	2301      	movs	r3, #1
 8003460:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f383 8810 	msr	PRIMASK, r3
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2140      	movs	r1, #64	; 0x40
 8003476:	430a      	orrs	r2, r1
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	f383 8810 	msr	PRIMASK, r3
}
 8003484:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003486:	e013      	b.n	80034b0 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2252      	movs	r2, #82	; 0x52
 80034a2:	5a9b      	ldrh	r3, [r3, r2]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b299      	uxth	r1, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2252      	movs	r2, #82	; 0x52
 80034ae:	5299      	strh	r1, [r3, r2]
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b00a      	add	sp, #40	; 0x28
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08c      	sub	sp, #48	; 0x30
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034c4:	2b21      	cmp	r3, #33	; 0x21
 80034c6:	d151      	bne.n	800356c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2252      	movs	r2, #82	; 0x52
 80034cc:	5a9b      	ldrh	r3, [r3, r2]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d132      	bne.n	800353a <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d4:	f3ef 8310 	mrs	r3, PRIMASK
 80034d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80034da:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80034dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034de:	2301      	movs	r3, #1
 80034e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f383 8810 	msr	PRIMASK, r3
}
 80034e8:	46c0      	nop			; (mov r8, r8)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2180      	movs	r1, #128	; 0x80
 80034f6:	438a      	bics	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f383 8810 	msr	PRIMASK, r3
}
 8003504:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003506:	f3ef 8310 	mrs	r3, PRIMASK
 800350a:	61bb      	str	r3, [r7, #24]
  return(result);
 800350c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
 8003510:	2301      	movs	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f383 8810 	msr	PRIMASK, r3
}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2140      	movs	r1, #64	; 0x40
 8003528:	430a      	orrs	r2, r1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	f383 8810 	msr	PRIMASK, r3
}
 8003536:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003538:	e018      	b.n	800356c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	001a      	movs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	05d2      	lsls	r2, r2, #23
 800354c:	0dd2      	lsrs	r2, r2, #23
 800354e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003554:	1c9a      	adds	r2, r3, #2
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2252      	movs	r2, #82	; 0x52
 800355e:	5a9b      	ldrh	r3, [r3, r2]
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b299      	uxth	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2252      	movs	r2, #82	; 0x52
 800356a:	5299      	strh	r1, [r3, r2]
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b00c      	add	sp, #48	; 0x30
 8003572:	bd80      	pop	{r7, pc}

08003574 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357c:	f3ef 8310 	mrs	r3, PRIMASK
 8003580:	60bb      	str	r3, [r7, #8]
  return(result);
 8003582:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	2301      	movs	r3, #1
 8003588:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f383 8810 	msr	PRIMASK, r3
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2140      	movs	r1, #64	; 0x40
 800359e:	438a      	bics	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f383 8810 	msr	PRIMASK, r3
}
 80035ac:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2220      	movs	r2, #32
 80035b2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	0018      	movs	r0, r3
 80035be:	f7fc ffab 	bl	8000518 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b006      	add	sp, #24
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b094      	sub	sp, #80	; 0x50
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80035d4:	204e      	movs	r0, #78	; 0x4e
 80035d6:	183b      	adds	r3, r7, r0
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	215c      	movs	r1, #92	; 0x5c
 80035dc:	5a52      	ldrh	r2, [r2, r1]
 80035de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2280      	movs	r2, #128	; 0x80
 80035e4:	589b      	ldr	r3, [r3, r2]
 80035e6:	2b22      	cmp	r3, #34	; 0x22
 80035e8:	d000      	beq.n	80035ec <UART_RxISR_8BIT+0x20>
 80035ea:	e0bf      	b.n	800376c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035f2:	214c      	movs	r1, #76	; 0x4c
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	881b      	ldrh	r3, [r3, #0]
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	183b      	adds	r3, r7, r0
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b2d9      	uxtb	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	400a      	ands	r2, r1
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	225a      	movs	r2, #90	; 0x5a
 800361c:	5a9b      	ldrh	r3, [r3, r2]
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b299      	uxth	r1, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	225a      	movs	r2, #90	; 0x5a
 8003628:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	225a      	movs	r2, #90	; 0x5a
 800362e:	5a9b      	ldrh	r3, [r3, r2]
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d000      	beq.n	8003638 <UART_RxISR_8BIT+0x6c>
 8003636:	e0a1      	b.n	800377c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003638:	f3ef 8310 	mrs	r3, PRIMASK
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003640:	64bb      	str	r3, [r7, #72]	; 0x48
 8003642:	2301      	movs	r3, #1
 8003644:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003648:	f383 8810 	msr	PRIMASK, r3
}
 800364c:	46c0      	nop			; (mov r8, r8)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	494a      	ldr	r1, [pc, #296]	; (8003784 <UART_RxISR_8BIT+0x1b8>)
 800365a:	400a      	ands	r2, r1
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	f383 8810 	msr	PRIMASK, r3
}
 8003668:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800366a:	f3ef 8310 	mrs	r3, PRIMASK
 800366e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003672:	647b      	str	r3, [r7, #68]	; 0x44
 8003674:	2301      	movs	r3, #1
 8003676:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367a:	f383 8810 	msr	PRIMASK, r3
}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2101      	movs	r1, #1
 800368c:	438a      	bics	r2, r1
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003692:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003696:	f383 8810 	msr	PRIMASK, r3
}
 800369a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2280      	movs	r2, #128	; 0x80
 80036a0:	2120      	movs	r1, #32
 80036a2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a34      	ldr	r2, [pc, #208]	; (8003788 <UART_RxISR_8BIT+0x1bc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01f      	beq.n	80036fa <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	041b      	lsls	r3, r3, #16
 80036c4:	4013      	ands	r3, r2
 80036c6:	d018      	beq.n	80036fa <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c8:	f3ef 8310 	mrs	r3, PRIMASK
 80036cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80036ce:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80036d0:	643b      	str	r3, [r7, #64]	; 0x40
 80036d2:	2301      	movs	r3, #1
 80036d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f383 8810 	msr	PRIMASK, r3
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4928      	ldr	r1, [pc, #160]	; (800378c <UART_RxISR_8BIT+0x1c0>)
 80036ea:	400a      	ands	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	f383 8810 	msr	PRIMASK, r3
}
 80036f8:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d12f      	bne.n	8003762 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003708:	f3ef 8310 	mrs	r3, PRIMASK
 800370c:	60fb      	str	r3, [r7, #12]
  return(result);
 800370e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003712:	2301      	movs	r3, #1
 8003714:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f383 8810 	msr	PRIMASK, r3
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2110      	movs	r1, #16
 800372a:	438a      	bics	r2, r1
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003730:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f383 8810 	msr	PRIMASK, r3
}
 8003738:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	2210      	movs	r2, #16
 8003742:	4013      	ands	r3, r2
 8003744:	2b10      	cmp	r3, #16
 8003746:	d103      	bne.n	8003750 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2210      	movs	r2, #16
 800374e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2258      	movs	r2, #88	; 0x58
 8003754:	5a9a      	ldrh	r2, [r3, r2]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	0011      	movs	r1, r2
 800375a:	0018      	movs	r0, r3
 800375c:	f7ff f8b8 	bl	80028d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003760:	e00c      	b.n	800377c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0018      	movs	r0, r3
 8003766:	f7fc feef 	bl	8000548 <HAL_UART_RxCpltCallback>
}
 800376a:	e007      	b.n	800377c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2108      	movs	r1, #8
 8003778:	430a      	orrs	r2, r1
 800377a:	619a      	str	r2, [r3, #24]
}
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	b014      	add	sp, #80	; 0x50
 8003782:	bd80      	pop	{r7, pc}
 8003784:	fffffedf 	.word	0xfffffedf
 8003788:	40004800 	.word	0x40004800
 800378c:	fbffffff 	.word	0xfbffffff

08003790 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b094      	sub	sp, #80	; 0x50
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003798:	204e      	movs	r0, #78	; 0x4e
 800379a:	183b      	adds	r3, r7, r0
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	215c      	movs	r1, #92	; 0x5c
 80037a0:	5a52      	ldrh	r2, [r2, r1]
 80037a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2280      	movs	r2, #128	; 0x80
 80037a8:	589b      	ldr	r3, [r3, r2]
 80037aa:	2b22      	cmp	r3, #34	; 0x22
 80037ac:	d000      	beq.n	80037b0 <UART_RxISR_16BIT+0x20>
 80037ae:	e0bf      	b.n	8003930 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b6:	214c      	movs	r1, #76	; 0x4c
 80037b8:	187b      	adds	r3, r7, r1
 80037ba:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80037c2:	187b      	adds	r3, r7, r1
 80037c4:	183a      	adds	r2, r7, r0
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	8812      	ldrh	r2, [r2, #0]
 80037ca:	4013      	ands	r3, r2
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d6:	1c9a      	adds	r2, r3, #2
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	225a      	movs	r2, #90	; 0x5a
 80037e0:	5a9b      	ldrh	r3, [r3, r2]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b299      	uxth	r1, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	225a      	movs	r2, #90	; 0x5a
 80037ec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	225a      	movs	r2, #90	; 0x5a
 80037f2:	5a9b      	ldrh	r3, [r3, r2]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d000      	beq.n	80037fc <UART_RxISR_16BIT+0x6c>
 80037fa:	e0a1      	b.n	8003940 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003800:	623b      	str	r3, [r7, #32]
  return(result);
 8003802:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003804:	647b      	str	r3, [r7, #68]	; 0x44
 8003806:	2301      	movs	r3, #1
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	f383 8810 	msr	PRIMASK, r3
}
 8003810:	46c0      	nop			; (mov r8, r8)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	494a      	ldr	r1, [pc, #296]	; (8003948 <UART_RxISR_16BIT+0x1b8>)
 800381e:	400a      	ands	r2, r1
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003824:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	f383 8810 	msr	PRIMASK, r3
}
 800382c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800382e:	f3ef 8310 	mrs	r3, PRIMASK
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003834:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003836:	643b      	str	r3, [r7, #64]	; 0x40
 8003838:	2301      	movs	r3, #1
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	f383 8810 	msr	PRIMASK, r3
}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2101      	movs	r1, #1
 8003850:	438a      	bics	r2, r1
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003856:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385a:	f383 8810 	msr	PRIMASK, r3
}
 800385e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	2120      	movs	r1, #32
 8003866:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a34      	ldr	r2, [pc, #208]	; (800394c <UART_RxISR_16BIT+0x1bc>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d01f      	beq.n	80038be <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	4013      	ands	r3, r2
 800388a:	d018      	beq.n	80038be <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388c:	f3ef 8310 	mrs	r3, PRIMASK
 8003890:	617b      	str	r3, [r7, #20]
  return(result);
 8003892:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003896:	2301      	movs	r3, #1
 8003898:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	f383 8810 	msr	PRIMASK, r3
}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4928      	ldr	r1, [pc, #160]	; (8003950 <UART_RxISR_16BIT+0x1c0>)
 80038ae:	400a      	ands	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	f383 8810 	msr	PRIMASK, r3
}
 80038bc:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d12f      	bne.n	8003926 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038cc:	f3ef 8310 	mrs	r3, PRIMASK
 80038d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80038d2:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80038d6:	2301      	movs	r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f383 8810 	msr	PRIMASK, r3
}
 80038e0:	46c0      	nop			; (mov r8, r8)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2110      	movs	r1, #16
 80038ee:	438a      	bics	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f383 8810 	msr	PRIMASK, r3
}
 80038fc:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	2210      	movs	r2, #16
 8003906:	4013      	ands	r3, r2
 8003908:	2b10      	cmp	r3, #16
 800390a:	d103      	bne.n	8003914 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2210      	movs	r2, #16
 8003912:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2258      	movs	r2, #88	; 0x58
 8003918:	5a9a      	ldrh	r2, [r3, r2]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	0011      	movs	r1, r2
 800391e:	0018      	movs	r0, r3
 8003920:	f7fe ffd6 	bl	80028d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003924:	e00c      	b.n	8003940 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	0018      	movs	r0, r3
 800392a:	f7fc fe0d 	bl	8000548 <HAL_UART_RxCpltCallback>
}
 800392e:	e007      	b.n	8003940 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699a      	ldr	r2, [r3, #24]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2108      	movs	r1, #8
 800393c:	430a      	orrs	r2, r1
 800393e:	619a      	str	r2, [r3, #24]
}
 8003940:	46c0      	nop			; (mov r8, r8)
 8003942:	46bd      	mov	sp, r7
 8003944:	b014      	add	sp, #80	; 0x50
 8003946:	bd80      	pop	{r7, pc}
 8003948:	fffffedf 	.word	0xfffffedf
 800394c:	40004800 	.word	0x40004800
 8003950:	fbffffff 	.word	0xfbffffff

08003954 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b002      	add	sp, #8
 8003962:	bd80      	pop	{r7, pc}

08003964 <memset>:
 8003964:	0003      	movs	r3, r0
 8003966:	1882      	adds	r2, r0, r2
 8003968:	4293      	cmp	r3, r2
 800396a:	d100      	bne.n	800396e <memset+0xa>
 800396c:	4770      	bx	lr
 800396e:	7019      	strb	r1, [r3, #0]
 8003970:	3301      	adds	r3, #1
 8003972:	e7f9      	b.n	8003968 <memset+0x4>

08003974 <__libc_init_array>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	2600      	movs	r6, #0
 8003978:	4c0c      	ldr	r4, [pc, #48]	; (80039ac <__libc_init_array+0x38>)
 800397a:	4d0d      	ldr	r5, [pc, #52]	; (80039b0 <__libc_init_array+0x3c>)
 800397c:	1b64      	subs	r4, r4, r5
 800397e:	10a4      	asrs	r4, r4, #2
 8003980:	42a6      	cmp	r6, r4
 8003982:	d109      	bne.n	8003998 <__libc_init_array+0x24>
 8003984:	2600      	movs	r6, #0
 8003986:	f000 f819 	bl	80039bc <_init>
 800398a:	4c0a      	ldr	r4, [pc, #40]	; (80039b4 <__libc_init_array+0x40>)
 800398c:	4d0a      	ldr	r5, [pc, #40]	; (80039b8 <__libc_init_array+0x44>)
 800398e:	1b64      	subs	r4, r4, r5
 8003990:	10a4      	asrs	r4, r4, #2
 8003992:	42a6      	cmp	r6, r4
 8003994:	d105      	bne.n	80039a2 <__libc_init_array+0x2e>
 8003996:	bd70      	pop	{r4, r5, r6, pc}
 8003998:	00b3      	lsls	r3, r6, #2
 800399a:	58eb      	ldr	r3, [r5, r3]
 800399c:	4798      	blx	r3
 800399e:	3601      	adds	r6, #1
 80039a0:	e7ee      	b.n	8003980 <__libc_init_array+0xc>
 80039a2:	00b3      	lsls	r3, r6, #2
 80039a4:	58eb      	ldr	r3, [r5, r3]
 80039a6:	4798      	blx	r3
 80039a8:	3601      	adds	r6, #1
 80039aa:	e7f2      	b.n	8003992 <__libc_init_array+0x1e>
 80039ac:	08003a68 	.word	0x08003a68
 80039b0:	08003a68 	.word	0x08003a68
 80039b4:	08003a6c 	.word	0x08003a6c
 80039b8:	08003a68 	.word	0x08003a68

080039bc <_init>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr

080039c8 <_fini>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr
